
LoRaWAN_Radioenge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08004a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000010c  08004b44  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004b44  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6ad  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d37  00000000  00000000  0002c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f52  00000000  00000000  0002fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d196  00000000  00000000  000499b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f435  00000000  00000000  00056b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5f7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  000f5fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800456c 	.word	0x0800456c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	0800456c 	.word	0x0800456c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000588:	f3bf 8f4f 	dsb	sy
}
 800058c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <__NVIC_SystemReset+0x24>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000596:	4904      	ldr	r1, [pc, #16]	; (80005a8 <__NVIC_SystemReset+0x24>)
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_SystemReset+0x28>)
 800059a:	4313      	orrs	r3, r2
 800059c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <__NVIC_SystemReset+0x20>
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	05fa0004 	.word	0x05fa0004

080005b0 <UART_WriteString>:
char* payloads[5];
uint8_t port = 1, confirmado = 0, retries = 0;
int periodicidade = 0;
uint8_t buffer_err = 0;

void UART_WriteString(UART_HandleTypeDef *huart, char *val){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	uint32_t len_val = strlen(val);
 80005ba:	6838      	ldr	r0, [r7, #0]
 80005bc:	f7ff fe08 	bl	80001d0 <strlen>
 80005c0:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)val, len_val, HAL_MAX_DELAY);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	6839      	ldr	r1, [r7, #0]
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f002 fcf1 	bl	8002fb4 <HAL_UART_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <UART_ReadString>:

char* UART_ReadString(UART_HandleTypeDef *huart){
 80005dc:	b580      	push	{r7, lr}
 80005de:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80005e8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80005ec:	6018      	str	r0, [r3, #0]
	uint8_t received_data = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
	uint8_t buffer_pData[1024];
	uint32_t count = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

	while(1){
		int response = HAL_UART_Receive(huart, &received_data, 1, 1000);
 80005fa:	f207 410b 	addw	r1, r7, #1035	; 0x40b
 80005fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000602:	f2a3 401c 	subw	r0, r3, #1052	; 0x41c
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	2201      	movs	r2, #1
 800060c:	6800      	ldr	r0, [r0, #0]
 800060e:	f002 fd65 	bl	80030dc <HAL_UART_Receive>
 8000612:	4603      	mov	r3, r0
 8000614:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		if(HAL_OK == response){
 8000618:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800061c:	2b00      	cmp	r3, #0
 800061e:	d137      	bne.n	8000690 <UART_ReadString+0xb4>
			if(received_data == '\n'){
 8000620:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8000624:	2b0a      	cmp	r3, #10
 8000626:	d11e      	bne.n	8000666 <UART_ReadString+0x8a>
				buffer_pData[count] = received_data;
 8000628:	f897 140b 	ldrb.w	r1, [r7, #1035]	; 0x40b
 800062c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000630:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 8000634:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000638:	4413      	add	r3, r2
 800063a:	460a      	mov	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
				++count;
 800063e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000642:	3301      	adds	r3, #1
 8000644:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
				break;
 8000648:	bf00      	nop
			buffer_err = HAL_TIMEOUT;
			return "HAL_TIMEOUT";
		}
	}

	char* val_string = (char*)malloc(count + 1);
 800064a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800064e:	3301      	adds	r3, #1
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fa49 	bl	8003ae8 <malloc>
 8000656:	4603      	mov	r3, r0
 8000658:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	if (val_string != NULL) {
 800065c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000660:	2b00      	cmp	r3, #0
 8000662:	d068      	beq.n	8000736 <UART_ReadString+0x15a>
 8000664:	e02f      	b.n	80006c6 <UART_ReadString+0xea>
				if(received_data != '\r'){
 8000666:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 800066a:	2b0d      	cmp	r3, #13
 800066c:	d0c5      	beq.n	80005fa <UART_ReadString+0x1e>
					buffer_pData[count] = received_data;
 800066e:	f897 140b 	ldrb.w	r1, [r7, #1035]	; 0x40b
 8000672:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000676:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 800067a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800067e:	4413      	add	r3, r2
 8000680:	460a      	mov	r2, r1
 8000682:	701a      	strb	r2, [r3, #0]
					++count;
 8000684:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000688:	3301      	adds	r3, #1
 800068a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800068e:	e7b4      	b.n	80005fa <UART_ReadString+0x1e>
		else if(HAL_ERROR == response){
 8000690:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000694:	2b01      	cmp	r3, #1
 8000696:	d104      	bne.n	80006a2 <UART_ReadString+0xc6>
			buffer_err = HAL_ERROR;
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <UART_ReadString+0x180>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
			return "HAL_ERROR";
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <UART_ReadString+0x184>)
 80006a0:	e056      	b.n	8000750 <UART_ReadString+0x174>
		else if(HAL_BUSY == response){
 80006a2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d104      	bne.n	80006b4 <UART_ReadString+0xd8>
			buffer_err = HAL_BUSY;
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <UART_ReadString+0x180>)
 80006ac:	2202      	movs	r2, #2
 80006ae:	701a      	strb	r2, [r3, #0]
			return "HAL_BUSY";
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <UART_ReadString+0x188>)
 80006b2:	e04d      	b.n	8000750 <UART_ReadString+0x174>
		else if(HAL_TIMEOUT == response){
 80006b4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d19e      	bne.n	80005fa <UART_ReadString+0x1e>
			buffer_err = HAL_TIMEOUT;
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <UART_ReadString+0x180>)
 80006be:	2203      	movs	r2, #3
 80006c0:	701a      	strb	r2, [r3, #0]
			return "HAL_TIMEOUT";
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <UART_ReadString+0x18c>)
 80006c4:	e044      	b.n	8000750 <UART_ReadString+0x174>
		for (uint32_t i = 0; i < count; ++i)
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80006cc:	e026      	b.n	800071c <UART_ReadString+0x140>
			if(buffer_pData[i] != '\n' || buffer_pData[i] != '\r')
 80006ce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006d2:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 80006d6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	d109      	bne.n	80006f6 <UART_ReadString+0x11a>
 80006e2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80006e6:	f5a3 6283 	sub.w	r2, r3, #1048	; 0x418
 80006ea:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b0d      	cmp	r3, #13
 80006f4:	d00d      	beq.n	8000712 <UART_ReadString+0x136>
				val_string[i] = (char)buffer_pData[i];
 80006f6:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80006fa:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80006fe:	4413      	add	r3, r2
 8000700:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000704:	f5a2 6183 	sub.w	r1, r2, #1048	; 0x418
 8000708:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800070c:	440a      	add	r2, r1
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < count; ++i)
 8000712:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000716:	3301      	adds	r3, #1
 8000718:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 800071c:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8000720:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000724:	429a      	cmp	r2, r3
 8000726:	d3d2      	bcc.n	80006ce <UART_ReadString+0xf2>
	    val_string[count] = '\0';
 8000728:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800072c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
	}

	char* buffer_val = val_string;
 8000736:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800073a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	free(val_string);
 800073e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
 8000742:	f003 f9d9 	bl	8003af8 <free>
	buffer_err = HAL_OK;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <UART_ReadString+0x180>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
	return buffer_val;
 800074c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
}
 8000750:	4618      	mov	r0, r3
 8000752:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000248 	.word	0x20000248
 8000760:	08004698 	.word	0x08004698
 8000764:	080046a4 	.word	0x080046a4
 8000768:	080046b0 	.word	0x080046b0

0800076c <feedbackSerial>:

char* feedbackSerial(char* val, uint8_t exception){
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  if(feedback == 1){
 8000778:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <feedbackSerial+0x148>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10b      	bne.n	8000798 <feedbackSerial+0x2c>
	  UART_WriteString(SerialFeedback, "TX: ");
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <feedbackSerial+0x14c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	494d      	ldr	r1, [pc, #308]	; (80008bc <feedbackSerial+0x150>)
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff12 	bl	80005b0 <UART_WriteString>
	  UART_WriteString(SerialFeedback, val);
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <feedbackSerial+0x14c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff0c 	bl	80005b0 <UART_WriteString>
  }

  UART_WriteString(LoRa, val);
 8000798:	4b49      	ldr	r3, [pc, #292]	; (80008c0 <feedbackSerial+0x154>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff06 	bl	80005b0 <UART_WriteString>
  char* buff;
  uint8_t count = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	73fb      	strb	r3, [r7, #15]
  static uint8_t count_err = 0;

  while(1){
	  buff = UART_ReadString(LoRa);
 80007a8:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <feedbackSerial+0x154>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff15 	bl	80005dc <UART_ReadString>
 80007b2:	60b8      	str	r0, [r7, #8]

	  if(count_err >= 3)
 80007b4:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <feedbackSerial+0x158>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d901      	bls.n	80007c0 <feedbackSerial+0x54>
		  NVIC_SystemReset();
 80007bc:	f7ff fee2 	bl	8000584 <__NVIC_SystemReset>
	  else if(buffer_err != HAL_OK)
 80007c0:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <feedbackSerial+0x15c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <feedbackSerial+0x6a>
		  ++count_err;
 80007c8:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <feedbackSerial+0x158>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <feedbackSerial+0x158>)
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e002      	b.n	80007dc <feedbackSerial+0x70>
	  else
		  count_err = 0;
 80007d6:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <feedbackSerial+0x158>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]

	  if(exception == 0){
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10e      	bne.n	8000800 <feedbackSerial+0x94>
		  if(indexOf(buff, 'E') == indexOf(buff, 'R') - 1)
 80007e2:	2145      	movs	r1, #69	; 0x45
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f000 f91b 	bl	8000a20 <indexOf>
 80007ea:	4604      	mov	r4, r0
 80007ec:	2152      	movs	r1, #82	; 0x52
 80007ee:	68b8      	ldr	r0, [r7, #8]
 80007f0:	f000 f916 	bl	8000a20 <indexOf>
 80007f4:	4603      	mov	r3, r0
 80007f6:	3b01      	subs	r3, #1
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d139      	bne.n	8000870 <feedbackSerial+0x104>
			  return "";
 80007fc:	4b33      	ldr	r3, [pc, #204]	; (80008cc <feedbackSerial+0x160>)
 80007fe:	e055      	b.n	80008ac <feedbackSerial+0x140>
	      break;
	  }
	  else{
		  if(indexOf(buff, 'E') > 0 && indexOf(buff, 'D') < 0 && count > 0)
 8000800:	2145      	movs	r1, #69	; 0x45
 8000802:	68b8      	ldr	r0, [r7, #8]
 8000804:	f000 f90c 	bl	8000a20 <indexOf>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	dd0d      	ble.n	800082a <feedbackSerial+0xbe>
 800080e:	2144      	movs	r1, #68	; 0x44
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f000 f905 	bl	8000a20 <indexOf>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	da06      	bge.n	800082a <feedbackSerial+0xbe>
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <feedbackSerial+0xbe>
			count -= 1;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3b01      	subs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e021      	b.n	800086e <feedbackSerial+0x102>
	      else if(count <= 0)
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d021      	beq.n	8000874 <feedbackSerial+0x108>
	        break;
	      else if(indexOf(buff, 'K') > 0 || indexOf(buff, 'D') == indexOf(buff, 'N') + 2 || indexOf(buff, 'Y') > 0){
 8000830:	214b      	movs	r1, #75	; 0x4b
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f000 f8f4 	bl	8000a20 <indexOf>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	dc13      	bgt.n	8000866 <feedbackSerial+0xfa>
 800083e:	2144      	movs	r1, #68	; 0x44
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f000 f8ed 	bl	8000a20 <indexOf>
 8000846:	4604      	mov	r4, r0
 8000848:	214e      	movs	r1, #78	; 0x4e
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f000 f8e8 	bl	8000a20 <indexOf>
 8000850:	4603      	mov	r3, r0
 8000852:	3302      	adds	r3, #2
 8000854:	429c      	cmp	r4, r3
 8000856:	d006      	beq.n	8000866 <feedbackSerial+0xfa>
 8000858:	2159      	movs	r1, #89	; 0x59
 800085a:	68b8      	ldr	r0, [r7, #8]
 800085c:	f000 f8e0 	bl	8000a20 <indexOf>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	dda0      	ble.n	80007a8 <feedbackSerial+0x3c>
	    	  connected = 1;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <feedbackSerial+0x164>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
	    	  break;
 800086c:	e003      	b.n	8000876 <feedbackSerial+0x10a>
	  buff = UART_ReadString(LoRa);
 800086e:	e79b      	b.n	80007a8 <feedbackSerial+0x3c>
	      break;
 8000870:	bf00      	nop
 8000872:	e000      	b.n	8000876 <feedbackSerial+0x10a>
	        break;
 8000874:	bf00      	nop
	      }
	  }
  }

  if(feedback == 1){
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <feedbackSerial+0x148>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d115      	bne.n	80008aa <feedbackSerial+0x13e>
	  if(buff != ""){
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <feedbackSerial+0x160>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d00b      	beq.n	800089e <feedbackSerial+0x132>
		  UART_WriteString(SerialFeedback, "RX: ");
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <feedbackSerial+0x14c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4912      	ldr	r1, [pc, #72]	; (80008d4 <feedbackSerial+0x168>)
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe8f 	bl	80005b0 <UART_WriteString>
	  	  UART_WriteString(SerialFeedback, buff);
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <feedbackSerial+0x14c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe89 	bl	80005b0 <UART_WriteString>
	  }

	  UART_WriteString(SerialFeedback, "\r\n");
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <feedbackSerial+0x14c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <feedbackSerial+0x16c>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe83 	bl	80005b0 <UART_WriteString>
  }
  return buff;
 80008aa:	68bb      	ldr	r3, [r7, #8]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	20000130 	.word	0x20000130
 80008b8:	2000012c 	.word	0x2000012c
 80008bc:	080046bc 	.word	0x080046bc
 80008c0:	20000128 	.word	0x20000128
 80008c4:	20000249 	.word	0x20000249
 80008c8:	20000248 	.word	0x20000248
 80008cc:	080046c4 	.word	0x080046c4
 80008d0:	20000131 	.word	0x20000131
 80008d4:	080046c8 	.word	0x080046c8
 80008d8:	080046d0 	.word	0x080046d0

080008dc <commandAT>:


char* commandAT(uint8_t cmd, char* val, uint8_t exception){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0c6      	sub	sp, #280	; 0x118
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80008ea:	6019      	str	r1, [r3, #0]
 80008ec:	4611      	mov	r1, r2
 80008ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008f6:	4602      	mov	r2, r0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000902:	460a      	mov	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
  char* AT = "AT+";
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <commandAT+0xf0>)
 8000908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  char* buff;

  char command[BUFFER_SIZE];

  if(exception == 0 && val == "")
 800090c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000910:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d117      	bne.n	800094a <commandAT+0x6e>
 800091a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800091e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <commandAT+0xf4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10f      	bne.n	800094a <commandAT+0x6e>
	  sprintf(command, "%s%s=?\r\n\0", AT, AT_CMD[cmd]);
 800092a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800092e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <commandAT+0xf8>)
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	f107 000c 	add.w	r0, r7, #12
 800093e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000942:	4925      	ldr	r1, [pc, #148]	; (80009d8 <commandAT+0xfc>)
 8000944:	f003 fa0c 	bl	8003d60 <siprintf>
 8000948:	e02c      	b.n	80009a4 <commandAT+0xc8>
  else if(exception == 1)
 800094a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800094e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d10f      	bne.n	8000978 <commandAT+0x9c>
	  sprintf(command, "%s%s\r\n\0", AT, AT_CMD[cmd]);
 8000958:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800095c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <commandAT+0xf8>)
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	f107 000c 	add.w	r0, r7, #12
 800096c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000970:	491a      	ldr	r1, [pc, #104]	; (80009dc <commandAT+0x100>)
 8000972:	f003 f9f5 	bl	8003d60 <siprintf>
 8000976:	e015      	b.n	80009a4 <commandAT+0xc8>
  else
	  sprintf(command, "%s%s=%s\r\n\0", AT, AT_CMD[cmd], val);
 8000978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <commandAT+0xf8>)
 8000984:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000988:	f107 000c 	add.w	r0, r7, #12
 800098c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000990:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4613      	mov	r3, r2
 800099a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800099e:	4910      	ldr	r1, [pc, #64]	; (80009e0 <commandAT+0x104>)
 80009a0:	f003 f9de 	bl	8003d60 <siprintf>

  HAL_Delay(50);
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f000 ff79 	bl	800189c <HAL_Delay>
  return feedbackSerial(command, exception);
 80009aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ae:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fed6 	bl	800076c <feedbackSerial>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	080046d4 	.word	0x080046d4
 80009d0:	080046c4 	.word	0x080046c4
 80009d4:	20000000 	.word	0x20000000
 80009d8:	080046d8 	.word	0x080046d8
 80009dc:	080046e4 	.word	0x080046e4
 80009e0:	080046ec 	.word	0x080046ec

080009e4 <uint32_tTocharPointer>:

char* uint32_tTocharPointer(uint32_t val){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80009f0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80009f4:	6018      	str	r0, [r3, #0]
	char buffer[1024];
	snprintf(buffer, sizeof(buffer), "%lu", (unsigned long)val);
 80009f6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80009fa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80009fe:	f107 0008 	add.w	r0, r7, #8
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <uint32_tTocharPointer+0x38>)
 8000a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0a:	f003 f975 	bl	8003cf8 <sniprintf>
	return buffer;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	080046f8 	.word	0x080046f8

08000a20 <indexOf>:

int indexOf(char* val, char search){
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < strlen(val); ++i){
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	e00b      	b.n	8000a4a <indexOf+0x2a>
		if(val[i] == search)
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	78fa      	ldrb	r2, [r7, #3]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d101      	bne.n	8000a44 <indexOf+0x24>
			return i;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	e00b      	b.n	8000a5c <indexOf+0x3c>
	for(uint8_t i = 0; i < strlen(val); ++i){
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	3301      	adds	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	7bfc      	ldrb	r4, [r7, #15]
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fbbf 	bl	80001d0 <strlen>
 8000a52:	4603      	mov	r3, r0
 8000a54:	429c      	cmp	r4, r3
 8000a56:	d3ec      	bcc.n	8000a32 <indexOf+0x12>
	}
	return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}

08000a64 <deserializeAT>:
	if(val == 1)
		return "1";
	return "0";
}

void deserializeAT(uint8_t cmd) {
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    char* val_char = commandAT(cmd, "", 0);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2200      	movs	r2, #0
 8000a72:	491c      	ldr	r1, [pc, #112]	; (8000ae4 <deserializeAT+0x80>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff31 	bl	80008dc <commandAT>
 8000a7a:	60b8      	str	r0, [r7, #8]
    uint8_t count = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < strlen(val_char); ++i) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	e022      	b.n	8000acc <deserializeAT+0x68>
        if (val_char[i] != ':') {
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b3a      	cmp	r3, #58	; 0x3a
 8000a90:	d016      	beq.n	8000ac0 <deserializeAT+0x5c>
            if (count < strlen(val_char) - 1) {
 8000a92:	7bfc      	ldrb	r4, [r7, #15]
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f7ff fb9b 	bl	80001d0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	429c      	cmp	r4, r3
 8000aa0:	d211      	bcs.n	8000ac6 <deserializeAT+0x62>
                payloads[count] += val_char[i];
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <deserializeAT+0x84>)
 8000aa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	440b      	add	r3, r1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	440a      	add	r2, r1
 8000ab8:	490b      	ldr	r1, [pc, #44]	; (8000ae8 <deserializeAT+0x84>)
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000abe:	e002      	b.n	8000ac6 <deserializeAT+0x62>
            }
        } else {
            ++count;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < strlen(val_char); ++i) {
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73bb      	strb	r3, [r7, #14]
 8000acc:	7bbc      	ldrb	r4, [r7, #14]
 8000ace:	68b8      	ldr	r0, [r7, #8]
 8000ad0:	f7ff fb7e 	bl	80001d0 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	d3d5      	bcc.n	8000a86 <deserializeAT+0x22>
        }
    }
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	080046c4 	.word	0x080046c4
 8000ae8:	20000234 	.word	0x20000234

08000aec <separator>:

char* separator(char* val) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    size_t val_size = strlen(val);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fb6b 	bl	80001d0 <strlen>
 8000afa:	6138      	str	r0, [r7, #16]

    if (val_size % 2 == 0 && indexOf(val, ':') < 1) {
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d153      	bne.n	8000bae <separator+0xc2>
 8000b06:	213a      	movs	r1, #58	; 0x3a
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff89 	bl	8000a20 <indexOf>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dc4c      	bgt.n	8000bae <separator+0xc2>
        size_t result_size = val_size * 2 + 1;
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
        char* result = (char*)malloc(result_size);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f002 ffe3 	bl	8003ae8 <malloc>
 8000b22:	4603      	mov	r3, r0
 8000b24:	60bb      	str	r3, [r7, #8]

        if (result != NULL) {
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d040      	beq.n	8000bae <separator+0xc2>
            uint8_t count = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]
            uint8_t pair_count = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	75bb      	strb	r3, [r7, #22]

            for (uint8_t i = 0; i < val_size; ++i) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	757b      	strb	r3, [r7, #21]
 8000b38:	e029      	b.n	8000b8e <separator+0xa2>
                result[count] = val[i];
 8000b3a:	7d7b      	ldrb	r3, [r7, #21]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	441a      	add	r2, r3
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	440b      	add	r3, r1
 8000b46:	7812      	ldrb	r2, [r2, #0]
 8000b48:	701a      	strb	r2, [r3, #0]
                ++count;
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	75fb      	strb	r3, [r7, #23]

                if (pair_count > 0 && i + 1 < val_size) {
 8000b50:	7dbb      	ldrb	r3, [r7, #22]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00f      	beq.n	8000b76 <separator+0x8a>
 8000b56:	7d7b      	ldrb	r3, [r7, #21]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d909      	bls.n	8000b76 <separator+0x8a>
                    result[count] = ':';
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	4413      	add	r3, r2
 8000b68:	223a      	movs	r2, #58	; 0x3a
 8000b6a:	701a      	strb	r2, [r3, #0]
                    ++count;
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
                    pair_count = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	75bb      	strb	r3, [r7, #22]
                }

                if(i % 2 == 0)
 8000b76:	7d7b      	ldrb	r3, [r7, #21]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <separator+0x9c>
                	++pair_count;
 8000b82:	7dbb      	ldrb	r3, [r7, #22]
 8000b84:	3301      	adds	r3, #1
 8000b86:	75bb      	strb	r3, [r7, #22]
            for (uint8_t i = 0; i < val_size; ++i) {
 8000b88:	7d7b      	ldrb	r3, [r7, #21]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	757b      	strb	r3, [r7, #21]
 8000b8e:	7d7b      	ldrb	r3, [r7, #21]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d8d1      	bhi.n	8000b3a <separator+0x4e>

            }
            result[count] = '\0';
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]

            val = result;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	607b      	str	r3, [r7, #4]
            free(result);
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f002 ffa7 	bl	8003af8 <free>
            return val;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	e000      	b.n	8000bb0 <separator+0xc4>
        }
    }

    return val;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <GPIO>:

uint16_t GPIO(uint8_t cmd, uint8_t pin, uint8_t val){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	71bb      	strb	r3, [r7, #6]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	717b      	strb	r3, [r7, #5]
  char* buff = "";
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <GPIO+0x64>)
 8000bcc:	60fb      	str	r3, [r7, #12]

  if(val != 2){
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d00d      	beq.n	8000bf0 <GPIO+0x38>
	sprintf(g_payload, "%d:%d\0", pin, val);
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	4911      	ldr	r1, [pc, #68]	; (8000c20 <GPIO+0x68>)
 8000bda:	4812      	ldr	r0, [pc, #72]	; (8000c24 <GPIO+0x6c>)
 8000bdc:	f003 f8c0 	bl	8003d60 <siprintf>
	buff = commandAT(cmd, g_payload, 0);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2200      	movs	r2, #0
 8000be4:	490f      	ldr	r1, [pc, #60]	; (8000c24 <GPIO+0x6c>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe78 	bl	80008dc <commandAT>
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	e00a      	b.n	8000c06 <GPIO+0x4e>
  }
  else{
	buff = commandAT(cmd, uint32_tTocharPointer(pin), 0);
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fef6 	bl	80009e4 <uint32_tTocharPointer>
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fe6c 	bl	80008dc <commandAT>
 8000c04:	60f8      	str	r0, [r7, #12]
  }

  return (uint16_t)strtoul(buff, NULL, 10);
 8000c06:	220a      	movs	r2, #10
 8000c08:	2100      	movs	r1, #0
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f003 f946 	bl	8003e9c <strtoul>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29b      	uxth	r3, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	080046c4 	.word	0x080046c4
 8000c20:	08004704 	.word	0x08004704
 8000c24:	20000134 	.word	0x20000134

08000c28 <printParameters>:

void printParameters(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  uint8_t buff = feedback;
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <printParameters+0x180>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	77fb      	strb	r3, [r7, #31]
  feedback = 0;
 8000c34:	4b5c      	ldr	r3, [pc, #368]	; (8000da8 <printParameters+0x180>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
  char* version = VER();
 8000c3a:	f000 f9a3 	bl	8000f84 <VER>
 8000c3e:	61b8      	str	r0, [r7, #24]

  UART_WriteString(SerialFeedback, "---------------------------------------------------\r\n");
 8000c40:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <printParameters+0x184>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	495a      	ldr	r1, [pc, #360]	; (8000db0 <printParameters+0x188>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fcb2 	bl	80005b0 <UART_WriteString>
  UART_WriteString(SerialFeedback, "                  LoRaWAN Radioenge\r\n");
 8000c4c:	4b57      	ldr	r3, [pc, #348]	; (8000dac <printParameters+0x184>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4958      	ldr	r1, [pc, #352]	; (8000db4 <printParameters+0x18c>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fcac 	bl	80005b0 <UART_WriteString>
  UART_WriteString(SerialFeedback, " Version        = "); UART_WriteString(SerialFeedback, version);  UART_WriteString(SerialFeedback, "\r"); char* _DEUI = DEUI();
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <printParameters+0x184>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4956      	ldr	r1, [pc, #344]	; (8000db8 <printParameters+0x190>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fca6 	bl	80005b0 <UART_WriteString>
 8000c64:	4b51      	ldr	r3, [pc, #324]	; (8000dac <printParameters+0x184>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	69b9      	ldr	r1, [r7, #24]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fca0 	bl	80005b0 <UART_WriteString>
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <printParameters+0x184>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4951      	ldr	r1, [pc, #324]	; (8000dbc <printParameters+0x194>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc9a 	bl	80005b0 <UART_WriteString>
 8000c7c:	f000 f962 	bl	8000f44 <DEUI>
 8000c80:	6178      	str	r0, [r7, #20]
  UART_WriteString(SerialFeedback, " DevEui         = "); UART_WriteString(SerialFeedback, _DEUI); UART_WriteString(SerialFeedback, "\r"); char* _DADDR = DADDR("");
 8000c82:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <printParameters+0x184>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	494e      	ldr	r1, [pc, #312]	; (8000dc0 <printParameters+0x198>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc91 	bl	80005b0 <UART_WriteString>
 8000c8e:	4b47      	ldr	r3, [pc, #284]	; (8000dac <printParameters+0x184>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6979      	ldr	r1, [r7, #20]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc8b 	bl	80005b0 <UART_WriteString>
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <printParameters+0x184>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4947      	ldr	r1, [pc, #284]	; (8000dbc <printParameters+0x194>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fc85 	bl	80005b0 <UART_WriteString>
 8000ca6:	4847      	ldr	r0, [pc, #284]	; (8000dc4 <printParameters+0x19c>)
 8000ca8:	f000 f8b6 	bl	8000e18 <DADDR>
 8000cac:	6138      	str	r0, [r7, #16]
  UART_WriteString(SerialFeedback, " DevAddr        = "); UART_WriteString(SerialFeedback, _DADDR); UART_WriteString(SerialFeedback, "\r"); char* _APPKEY = APPKEY("");
 8000cae:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <printParameters+0x184>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4945      	ldr	r1, [pc, #276]	; (8000dc8 <printParameters+0x1a0>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fc7b 	bl	80005b0 <UART_WriteString>
 8000cba:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <printParameters+0x184>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6939      	ldr	r1, [r7, #16]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc75 	bl	80005b0 <UART_WriteString>
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <printParameters+0x184>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	493c      	ldr	r1, [pc, #240]	; (8000dbc <printParameters+0x194>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc6f 	bl	80005b0 <UART_WriteString>
 8000cd2:	483c      	ldr	r0, [pc, #240]	; (8000dc4 <printParameters+0x19c>)
 8000cd4:	f000 f8be 	bl	8000e54 <APPKEY>
 8000cd8:	60f8      	str	r0, [r7, #12]
  UART_WriteString(SerialFeedback, " AppKey         = "); UART_WriteString(SerialFeedback, _APPKEY); UART_WriteString(SerialFeedback, "\r"); char* _APPSKEY = APPSKEY("");
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <printParameters+0x184>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	493b      	ldr	r1, [pc, #236]	; (8000dcc <printParameters+0x1a4>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fc65 	bl	80005b0 <UART_WriteString>
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <printParameters+0x184>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68f9      	ldr	r1, [r7, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc5f 	bl	80005b0 <UART_WriteString>
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <printParameters+0x184>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4931      	ldr	r1, [pc, #196]	; (8000dbc <printParameters+0x194>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fc59 	bl	80005b0 <UART_WriteString>
 8000cfe:	4831      	ldr	r0, [pc, #196]	; (8000dc4 <printParameters+0x19c>)
 8000d00:	f000 f8c6 	bl	8000e90 <APPSKEY>
 8000d04:	60b8      	str	r0, [r7, #8]
  UART_WriteString(SerialFeedback, " AppSKey        = "); UART_WriteString(SerialFeedback, _APPSKEY); UART_WriteString(SerialFeedback, "\r"); char* _NWKSKEY = NWKSKEY("");
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <printParameters+0x184>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4931      	ldr	r1, [pc, #196]	; (8000dd0 <printParameters+0x1a8>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc4f 	bl	80005b0 <UART_WriteString>
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <printParameters+0x184>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc49 	bl	80005b0 <UART_WriteString>
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <printParameters+0x184>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4926      	ldr	r1, [pc, #152]	; (8000dbc <printParameters+0x194>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fc43 	bl	80005b0 <UART_WriteString>
 8000d2a:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <printParameters+0x19c>)
 8000d2c:	f000 f8ce 	bl	8000ecc <NWKSKEY>
 8000d30:	6078      	str	r0, [r7, #4]
  UART_WriteString(SerialFeedback, " NwkSKey        = "); UART_WriteString(SerialFeedback, _NWKSKEY); UART_WriteString(SerialFeedback, "\r"); char* _APPEUI = APPEUI("");
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <printParameters+0x184>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4927      	ldr	r1, [pc, #156]	; (8000dd4 <printParameters+0x1ac>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fc39 	bl	80005b0 <UART_WriteString>
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <printParameters+0x184>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fc33 	bl	80005b0 <UART_WriteString>
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <printParameters+0x184>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	491b      	ldr	r1, [pc, #108]	; (8000dbc <printParameters+0x194>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc2d 	bl	80005b0 <UART_WriteString>
 8000d56:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <printParameters+0x19c>)
 8000d58:	f000 f8d6 	bl	8000f08 <APPEUI>
 8000d5c:	6038      	str	r0, [r7, #0]
  UART_WriteString(SerialFeedback, " AppEui/JoinEui = "); UART_WriteString(SerialFeedback, _APPEUI); UART_WriteString(SerialFeedback, "\r");
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <printParameters+0x184>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	491d      	ldr	r1, [pc, #116]	; (8000dd8 <printParameters+0x1b0>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fc23 	bl	80005b0 <UART_WriteString>
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <printParameters+0x184>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc1d 	bl	80005b0 <UART_WriteString>
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <printParameters+0x184>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4910      	ldr	r1, [pc, #64]	; (8000dbc <printParameters+0x194>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc17 	bl	80005b0 <UART_WriteString>
  UART_WriteString(SerialFeedback, "                    elcereza.com\r\n");
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <printParameters+0x184>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4915      	ldr	r1, [pc, #84]	; (8000ddc <printParameters+0x1b4>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fc11 	bl	80005b0 <UART_WriteString>
  UART_WriteString(SerialFeedback, "---------------------------------------------------\r\n");
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <printParameters+0x184>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4907      	ldr	r1, [pc, #28]	; (8000db0 <printParameters+0x188>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc0b 	bl	80005b0 <UART_WriteString>

  feedback = buff;
 8000d9a:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <printParameters+0x180>)
 8000d9c:	7ffb      	ldrb	r3, [r7, #31]
 8000d9e:	7013      	strb	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000130 	.word	0x20000130
 8000dac:	2000012c 	.word	0x2000012c
 8000db0:	0800470c 	.word	0x0800470c
 8000db4:	08004744 	.word	0x08004744
 8000db8:	0800476c 	.word	0x0800476c
 8000dbc:	08004780 	.word	0x08004780
 8000dc0:	08004784 	.word	0x08004784
 8000dc4:	080046c4 	.word	0x080046c4
 8000dc8:	08004798 	.word	0x08004798
 8000dcc:	080047ac 	.word	0x080047ac
 8000dd0:	080047c0 	.word	0x080047c0
 8000dd4:	080047d4 	.word	0x080047d4
 8000dd8:	080047e8 	.word	0x080047e8
 8000ddc:	080047fc 	.word	0x080047fc

08000de0 <LoRaWAN_Begin>:

void LoRaWAN_Begin(uint8_t _feedback, UART_HandleTypeDef* _LoRa, UART_HandleTypeDef* _SerialFeedBack){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  LoRa = _LoRa;
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <LoRaWAN_Begin+0x2c>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	6013      	str	r3, [r2, #0]
  SerialFeedback = _SerialFeedBack;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <LoRaWAN_Begin+0x30>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  feedback = _feedback;
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <LoRaWAN_Begin+0x34>)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	7013      	strb	r3, [r2, #0]
  printParameters();
 8000e00:	f7ff ff12 	bl	8000c28 <printParameters>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000128 	.word	0x20000128
 8000e10:	2000012c 	.word	0x2000012c
 8000e14:	20000130 	.word	0x20000130

08000e18 <DADDR>:

char* DADDR(char* val){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(val != "") commandAT(_DADDR_, separator(val), 0);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <DADDR+0x38>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d008      	beq.n	8000e3a <DADDR+0x22>
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fe5f 	bl	8000aec <separator>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2200      	movs	r2, #0
 8000e32:	4619      	mov	r1, r3
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff fd51 	bl	80008dc <commandAT>
  return commandAT(_DADDR_, "", 0);;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <DADDR+0x38>)
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fd4c 	bl	80008dc <commandAT>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	080046c4 	.word	0x080046c4

08000e54 <APPKEY>:

char* APPKEY(char* val){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(val != "") commandAT(_APPKEY_, separator(val), 0);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <APPKEY+0x38>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d008      	beq.n	8000e76 <APPKEY+0x22>
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fe41 	bl	8000aec <separator>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fd33 	bl	80008dc <commandAT>
  return commandAT(_APPKEY_, "", 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	4904      	ldr	r1, [pc, #16]	; (8000e8c <APPKEY+0x38>)
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fd2e 	bl	80008dc <commandAT>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	080046c4 	.word	0x080046c4

08000e90 <APPSKEY>:

char* APPSKEY(char* val){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(val != "") commandAT(_APPSKEY_, separator(val), 0);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <APPSKEY+0x38>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d008      	beq.n	8000eb2 <APPSKEY+0x22>
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fe23 	bl	8000aec <separator>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2003      	movs	r0, #3
 8000eae:	f7ff fd15 	bl	80008dc <commandAT>
  return commandAT(_APPSKEY_, "", 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <APPSKEY+0x38>)
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f7ff fd10 	bl	80008dc <commandAT>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	080046c4 	.word	0x080046c4

08000ecc <NWKSKEY>:

char* NWKSKEY(char* val){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(val != "") commandAT(_NWKSKEY_, separator(val), 0);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <NWKSKEY+0x38>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d008      	beq.n	8000eee <NWKSKEY+0x22>
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fe05 	bl	8000aec <separator>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f7ff fcf7 	bl	80008dc <commandAT>
  return commandAT(_NWKSKEY_, "", 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <NWKSKEY+0x38>)
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff fcf2 	bl	80008dc <commandAT>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	080046c4 	.word	0x080046c4

08000f08 <APPEUI>:

char* APPEUI(char* val){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(val != "") commandAT(_APPEUI_, separator(val), 0);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <APPEUI+0x38>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d008      	beq.n	8000f2a <APPEUI+0x22>
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fde7 	bl	8000aec <separator>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	2005      	movs	r0, #5
 8000f26:	f7ff fcd9 	bl	80008dc <commandAT>
  return commandAT(_APPEUI_, "", 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <APPEUI+0x38>)
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f7ff fcd4 	bl	80008dc <commandAT>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080046c4 	.word	0x080046c4

08000f44 <DEUI>:

char* DEUI(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  return commandAT(_DEUI_, "", 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4903      	ldr	r1, [pc, #12]	; (8000f58 <DEUI+0x14>)
 8000f4c:	2026      	movs	r0, #38	; 0x26
 8000f4e:	f7ff fcc5 	bl	80008dc <commandAT>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	080046c4 	.word	0x080046c4

08000f5c <JOIN>:
  else if(val == 1) commandAT(_CLASS_, "C", 0);
  else if(commandAT(_CLASS_, "", 0) == "C") return 1;
  return 0;
}

uint8_t JOIN(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  char* buff = commandAT(_JOIN_, "", 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	4905      	ldr	r1, [pc, #20]	; (8000f7c <JOIN+0x20>)
 8000f66:	2013      	movs	r0, #19
 8000f68:	f7ff fcb8 	bl	80008dc <commandAT>
 8000f6c:	6078      	str	r0, [r7, #4]
  return connected;
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <JOIN+0x24>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	080046c4 	.word	0x080046c4
 8000f80:	20000131 	.word	0x20000131

08000f84 <VER>:

uint8_t NJS(){
  return commandAT(_NJS_, "", 0);
}

char* VER(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  return commandAT(_VER_, "", 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4903      	ldr	r1, [pc, #12]	; (8000f98 <VER+0x14>)
 8000f8c:	2017      	movs	r0, #23
 8000f8e:	f7ff fca5 	bl	80008dc <commandAT>
 8000f92:	4603      	mov	r3, r0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	080046c4 	.word	0x080046c4

08000f9c <pinMode>:
  periodicidade = uint32_tTocharPointer(payloads[3]);

  return uint32_tTocharPointer(payloads[0]);
}

uint8_t pinMode(uint8_t pin, uint8_t modo){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0c6      	sub	sp, #280	; 0x118
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fa8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
  uint8_t pull = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  if(pin > 9 || modo > 10) return 0;
 8000fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fc4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	d806      	bhi.n	8000fdc <pinMode+0x40>
 8000fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fd2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d901      	bls.n	8000fe0 <pinMode+0x44>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e0eb      	b.n	80011b8 <pinMode+0x21c>
  else if((modo == OUTPUT_FA_PUSHPULL || modo == OUTPUT_FA_OPENDRAIN) && pin != 0 && pin != 1) return 0;
 8000fe0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d006      	beq.n	8000ffc <pinMode+0x60>
 8000fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ff2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d10f      	bne.n	800101c <pinMode+0x80>
 8000ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001000:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d008      	beq.n	800101c <pinMode+0x80>
 800100a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800100e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d001      	beq.n	800101c <pinMode+0x80>
 8001018:	2300      	movs	r3, #0
 800101a:	e0cd      	b.n	80011b8 <pinMode+0x21c>
  else if(modo == INPUT_ADC && pin != 0 && pin != 1 && pin != 7 && pin != 8) return 0;
 800101c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001020:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b06      	cmp	r3, #6
 8001028:	d11d      	bne.n	8001066 <pinMode+0xca>
 800102a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800102e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d016      	beq.n	8001066 <pinMode+0xca>
 8001038:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800103c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00f      	beq.n	8001066 <pinMode+0xca>
 8001046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800104a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d008      	beq.n	8001066 <pinMode+0xca>
 8001054:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001058:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b08      	cmp	r3, #8
 8001060:	d001      	beq.n	8001066 <pinMode+0xca>
 8001062:	2300      	movs	r3, #0
 8001064:	e0a8      	b.n	80011b8 <pinMode+0x21c>
  else if((modo == INTERRUPT_RISING || modo == INTERRUPT_FALLING || modo == INTERRUPT_CHANGE) && pin == 0 && pin == 3 && pin == 7 && pin == 8) return 0;
 8001066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800106a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d00d      	beq.n	8001090 <pinMode+0xf4>
 8001074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001078:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b08      	cmp	r3, #8
 8001080:	d006      	beq.n	8001090 <pinMode+0xf4>
 8001082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001086:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b0a      	cmp	r3, #10
 800108e:	d11d      	bne.n	80010cc <pinMode+0x130>
 8001090:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001094:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d116      	bne.n	80010cc <pinMode+0x130>
 800109e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010a2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d10f      	bne.n	80010cc <pinMode+0x130>
 80010ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010b0:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d108      	bne.n	80010cc <pinMode+0x130>
 80010ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010be:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d101      	bne.n	80010cc <pinMode+0x130>
 80010c8:	2300      	movs	r3, #0
 80010ca:	e075      	b.n	80011b8 <pinMode+0x21c>

  if(modo == INPUT)
 80010cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010d0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d106      	bne.n	80010e8 <pinMode+0x14c>
    modo = 0;
 80010da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010de:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e00c      	b.n	8001102 <pinMode+0x166>
  else if(modo == OUTPUT)
 80010e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ec:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <pinMode+0x166>
    modo = 1;
 80010f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010fa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
  if(modo == INPUT_PULLUP){
 8001102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001106:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b05      	cmp	r3, #5
 800110e:	d109      	bne.n	8001124 <pinMode+0x188>
    modo = 0;
 8001110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001114:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
    pull = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001122:	e00c      	b.n	800113e <pinMode+0x1a2>
  }
  else if(pull == INPUT_PULLDOWN){
 8001124:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001128:	2b09      	cmp	r3, #9
 800112a:	d108      	bne.n	800113e <pinMode+0x1a2>
    modo = 0;
 800112c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001130:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    pull = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  }

  deserializeAT(_GPIOC_);
 800113e:	2022      	movs	r0, #34	; 0x22
 8001140:	f7ff fc90 	bl	8000a64 <deserializeAT>
  uint8_t _modo = uint32_tTocharPointer(payloads[1]);
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <pinMode+0x228>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fc4b 	bl	80009e4 <uint32_tTocharPointer>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  uint8_t _pull = uint32_tTocharPointer(payloads[2]);
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <pinMode+0x228>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fc43 	bl	80009e4 <uint32_tTocharPointer>
 800115e:	4603      	mov	r3, r0
 8001160:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

  char command[BUFFER_SIZE];
  sprintf(command, "%d:%d:%d\0", pin, modo, pull);
 8001164:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001168:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001172:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001176:	7819      	ldrb	r1, [r3, #0]
 8001178:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800117c:	f107 000c 	add.w	r0, r7, #12
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	460b      	mov	r3, r1
 8001184:	4910      	ldr	r1, [pc, #64]	; (80011c8 <pinMode+0x22c>)
 8001186:	f002 fdeb 	bl	8003d60 <siprintf>

  if(_modo != modo || _pull != pull)
 800118a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800118e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001192:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d105      	bne.n	80011a8 <pinMode+0x20c>
 800119c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80011a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d006      	beq.n	80011b6 <pinMode+0x21a>
	  commandAT(_GPIOC_, command, 0);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	2022      	movs	r0, #34	; 0x22
 80011b2:	f7ff fb93 	bl	80008dc <commandAT>
  return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000234 	.word	0x20000234
 80011c8:	08004848 	.word	0x08004848

080011cc <digitalWrite>:

uint8_t digitalRead(uint8_t pin){
  return (uint8_t)GPIO(_RPIN_, pin, "");
}

uint8_t digitalWrite(uint8_t pin, uint8_t val){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
  return (uint8_t)GPIO(_WPIN_, pin, val);
 80011dc:	79ba      	ldrb	r2, [r7, #6]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	2023      	movs	r0, #35	; 0x23
 80011e4:	f7ff fce8 	bl	8000bb8 <GPIO>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <SendString>:
    return 1;
  return 0;
}

uint8_t SendString(char* string, uint8_t _port)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
  if(string == NULL || strnlen(string, BUFFER_SIZE) >= BUFFER_SIZE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <SendString+0x22>
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f002 fdc8 	bl	8003da0 <strnlen>
 8001210:	4603      	mov	r3, r0
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d901      	bls.n	800121a <SendString+0x26>
    return 0;
 8001216:	2300      	movs	r3, #0
 8001218:	e011      	b.n	800123e <SendString+0x4a>
  if(connected > 0){
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <SendString+0x54>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00c      	beq.n	800123c <SendString+0x48>
	sprintf(g_payload, "%d:%s\0", _port, string);
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4909      	ldr	r1, [pc, #36]	; (800124c <SendString+0x58>)
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <SendString+0x5c>)
 800122a:	f002 fd99 	bl	8003d60 <siprintf>
	commandAT(_SEND_, g_payload, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <SendString+0x5c>)
 8001232:	2016      	movs	r0, #22
 8001234:	f7ff fb52 	bl	80008dc <commandAT>
	return 1;
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <SendString+0x4a>
  }

  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000131 	.word	0x20000131
 800124c:	08004894 	.word	0x08004894
 8001250:	20000134 	.word	0x20000134

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f000 faaa 	bl	80017b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125e:	f000 f839 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001262:	f000 f8ed 	bl	8001440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001266:	f000 f8bb 	bl	80013e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800126a:	f000 f889 	bl	8001380 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  LoRaWAN_Begin(1, &huart1, &huart2);
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <main+0x70>)
 8001270:	4915      	ldr	r1, [pc, #84]	; (80012c8 <main+0x74>)
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fdb4 	bl	8000de0 <LoRaWAN_Begin>
  pinMode(2, OUTPUT);
 8001278:	2101      	movs	r1, #1
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fe8e 	bl	8000f9c <pinMode>
  JOIN();
 8001280:	f7ff fe6c 	bl	8000f5c <JOIN>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  SendString("elcereza.com", 1);
 8001284:	2101      	movs	r1, #1
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <main+0x78>)
 8001288:	f7ff ffb4 	bl	80011f4 <SendString>

	  for(uint8_t i = 0; i < 4; ++i){
 800128c:	2300      	movs	r3, #0
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	e014      	b.n	80012bc <main+0x68>
		  digitalWrite(2, 1);
 8001292:	2101      	movs	r1, #1
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff ff99 	bl	80011cc <digitalWrite>
		  HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f000 fafe 	bl	800189c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80012a0:	2108      	movs	r1, #8
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <main+0x7c>)
 80012a4:	f000 fd8e 	bl	8001dc4 <HAL_GPIO_TogglePin>
		  digitalWrite(2, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2002      	movs	r0, #2
 80012ac:	f7ff ff8e 	bl	80011cc <digitalWrite>
		  HAL_Delay(100);
 80012b0:	2064      	movs	r0, #100	; 0x64
 80012b2:	f000 faf3 	bl	800189c <HAL_Delay>
	  for(uint8_t i = 0; i < 4; ++i){
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	3301      	adds	r3, #1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d9e7      	bls.n	8001292 <main+0x3e>
	  SendString("elcereza.com", 1);
 80012c2:	e7df      	b.n	8001284 <main+0x30>
 80012c4:	200002d0 	.word	0x200002d0
 80012c8:	2000024c 	.word	0x2000024c
 80012cc:	0800489c 	.word	0x0800489c
 80012d0:	48000400 	.word	0x48000400

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2244      	movs	r2, #68	; 0x44
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fc10 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012fa:	f000 fd9b 	bl	8001e34 <HAL_PWREx_ControlVoltageScaling>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001304:	f000 f8e6 	bl	80014d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001308:	f000 fd76 	bl	8001df8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <SystemClock_Config+0xa8>)
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	4a1a      	ldr	r2, [pc, #104]	; (800137c <SystemClock_Config+0xa8>)
 8001314:	f023 0318 	bic.w	r3, r3, #24
 8001318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800131c:	2314      	movs	r3, #20
 800131e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800132c:	23a0      	movs	r3, #160	; 0xa0
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fdd1 	bl	8001ee0 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001344:	f000 f8c6 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fa1f 	bl	80027a4 <HAL_RCC_ClockConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800136c:	f000 f8b2 	bl	80014d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001370:	f001 fdc2 	bl	8002ef8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001374:	bf00      	nop
 8001376:	3758      	adds	r7, #88	; 0x58
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_USART1_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 800138c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013c4:	f001 fda8 	bl	8002f18 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f000 f881 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000024c 	.word	0x2000024c
 80013dc:	40013800 	.word	0x40013800

080013e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <MX_USART2_UART_Init+0x5c>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_USART2_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART2_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART2_UART_Init+0x58>)
 8001424:	f001 fd78 	bl	8002f18 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800142e:	f000 f851 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200002d0 	.word	0x200002d0
 800143c:	40004400 	.word	0x40004400

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_GPIO_Init+0x8c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <MX_GPIO_Init+0x8c>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_GPIO_Init+0x8c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_GPIO_Init+0x8c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <MX_GPIO_Init+0x8c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_GPIO_Init+0x8c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_GPIO_Init+0x8c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <MX_GPIO_Init+0x8c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_GPIO_Init+0x8c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2108      	movs	r1, #8
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <MX_GPIO_Init+0x90>)
 80014a4:	f000 fc76 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014a8:	2308      	movs	r3, #8
 80014aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_GPIO_Init+0x90>)
 80014c0:	f000 faf6 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b098      	sub	sp, #96	; 0x60
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	2234      	movs	r2, #52	; 0x34
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fadd 	bl	8003b08 <memset>
  if(huart->Instance==USART1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_UART_MspInit+0x148>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d138      	bne.n	80015ca <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fb41 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff ffb0 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001574:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_UART_MspInit+0x14c>)
 8001576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001578:	4a3e      	ldr	r2, [pc, #248]	; (8001674 <HAL_UART_MspInit+0x14c>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6613      	str	r3, [r2, #96]	; 0x60
 8001580:	4b3c      	ldr	r3, [pc, #240]	; (8001674 <HAL_UART_MspInit+0x14c>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_UART_MspInit+0x14c>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	4a38      	ldr	r2, [pc, #224]	; (8001674 <HAL_UART_MspInit+0x14c>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <HAL_UART_MspInit+0x14c>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b6:	2307      	movs	r3, #7
 80015b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c4:	f000 fa74 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c8:	e04d      	b.n	8001666 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <HAL_UART_MspInit+0x150>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d148      	bne.n	8001666 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fb03 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80015ec:	f7ff ff72 	bl	80014d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_UART_MspInit+0x14c>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_UART_MspInit+0x14c>)
 80015f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_UART_MspInit+0x14c>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_UART_MspInit+0x14c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_UART_MspInit+0x14c>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_UART_MspInit+0x14c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001620:	2304      	movs	r3, #4
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001630:	2307      	movs	r3, #7
 8001632:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f000 fa37 	bl	8001ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001646:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001654:	2303      	movs	r3, #3
 8001656:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 fa25 	bl	8001ab0 <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3760      	adds	r7, #96	; 0x60
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40013800 	.word	0x40013800
 8001674:	40021000 	.word	0x40021000
 8001678:	40004400 	.word	0x40004400

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c8:	f000 f8c8 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f002 f9c8 	bl	8003a94 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000a000 	.word	0x2000a000
 8001730:	00000400 	.word	0x00000400
 8001734:	20000354 	.word	0x20000354
 8001738:	20000370 	.word	0x20000370

0800173c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001764:	f7ff ffea 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopForever+0x6>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopForever+0xe>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopForever+0x16>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178e:	f002 f987 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001792:	f7ff fd5f 	bl	8001254 <main>

08001796 <LoopForever>:

LoopForever:
    b LoopForever
 8001796:	e7fe      	b.n	8001796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001798:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80017a4:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 80017a8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80017ac:	2000036c 	.word	0x2000036c

080017b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC1_2_IRQHandler>

080017b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f943 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f80e 	bl	80017e4 <HAL_InitTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	71fb      	strb	r3, [r7, #7]
 80017d2:	e001      	b.n	80017d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d4:	f7ff fe84 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d8:	79fb      	ldrb	r3, [r7, #7]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_InitTick+0x6c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d023      	beq.n	8001840 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_InitTick+0x70>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <HAL_InitTick+0x6c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f941 	bl	8001a96 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d809      	bhi.n	8001834 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 f919 	bl	8001a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_InitTick+0x74>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e007      	b.n	8001844 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e004      	b.n	8001844 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e001      	b.n	8001844 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200000a4 	.word	0x200000a4
 8001854:	2000009c 	.word	0x2000009c
 8001858:	200000a0 	.word	0x200000a0

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200000a4 	.word	0x200000a4
 8001880:	20000358 	.word	0x20000358

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000358 	.word	0x20000358

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000a4 	.word	0x200000a4

080018e4 <__NVIC_SetPriorityGrouping>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_SetPriority>:
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff47 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff5c 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffb0 	bl	8001a04 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e14e      	b.n	8001d5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8140 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809a 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1d8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1d4>
 8001c80:	2303      	movs	r3, #3
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c84:	2307      	movs	r3, #7
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca2:	4937      	ldr	r1, [pc, #220]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f aea9 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43d9      	mvns	r1, r3
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	400b      	ands	r3, r1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40007000 	.word	0x40007000

08001e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e42:	d130      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d038      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2232      	movs	r2, #50	; 0x32
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0c9b      	lsrs	r3, r3, #18
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e78:	e002      	b.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d102      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f2      	bne.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea0:	d110      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e00f      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb2:	d007      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	2000009c 	.word	0x2000009c
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 bc4f 	b.w	8002792 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	4b97      	ldr	r3, [pc, #604]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efe:	4b95      	ldr	r3, [pc, #596]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80e6 	beq.w	80020e2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4c>
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	f040 808d 	bne.w	800203e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 8089 	bne.w	800203e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2c:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_RCC_OscConfig+0x66>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f000 bc26 	b.w	8002792 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <HAL_RCC_OscConfig+0x80>
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5e:	e005      	b.n	8001f6c <HAL_RCC_OscConfig+0x8c>
 8001f60:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d224      	bcs.n	8001fba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fdd9 	bl	8002b2c <RCC_SetFlashLatencyFromMSIRange>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f000 bc06 	b.w	8002792 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4968      	ldr	r1, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e025      	b.n	8002006 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a65      	ldr	r2, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	4960      	ldr	r1, [pc, #384]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	495b      	ldr	r1, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd98 	bl	8002b2c <RCC_SetFlashLatencyFromMSIRange>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e3c5      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002006:	f000 fccd 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4950      	ldr	r1, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x278>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002024:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fbda 	bl	80017e4 <HAL_InitTick>
 8002030:	4603      	mov	r3, r0
 8002032:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d052      	beq.n	80020e0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
 800203c:	e3a9      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d032      	beq.n	80020ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002052:	f7ff fc17 	bl	8001884 <HAL_GetTick>
 8002056:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205a:	f7ff fc13 	bl	8001884 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e392      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	4930      	ldr	r1, [pc, #192]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	492b      	ldr	r1, [pc, #172]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
 80020aa:	e01a      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a28      	ldr	r2, [pc, #160]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fbe4 	bl	8001884 <HAL_GetTick>
 80020bc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c0:	f7ff fbe0 	bl	8001884 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e35f      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e0>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d073      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x220>
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d10e      	bne.n	8002118 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d063      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2f4>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d15f      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e33c      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d106      	bne.n	8002130 <HAL_RCC_OscConfig+0x250>
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e025      	b.n	800217c <HAL_RCC_OscConfig+0x29c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002138:	d114      	bne.n	8002164 <HAL_RCC_OscConfig+0x284>
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a02      	ldr	r2, [pc, #8]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x29c>
 8002154:	40021000 	.word	0x40021000
 8002158:	080048ac 	.word	0x080048ac
 800215c:	2000009c 	.word	0x2000009c
 8002160:	200000a0 	.word	0x200000a0
 8002164:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a8e      	ldr	r2, [pc, #568]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b8c      	ldr	r3, [pc, #560]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a8b      	ldr	r2, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff fb7e 	bl	8001884 <HAL_GetTick>
 8002188:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fb7a 	bl	8001884 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e2f9      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2ac>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fb6a 	bl	8001884 <HAL_GetTick>
 80021b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fb66 	bl	8001884 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e2e5      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c6:	4b77      	ldr	r3, [pc, #476]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d060      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x314>
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d116      	bne.n	8002222 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f4:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x32c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e2c2      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	4962      	ldr	r1, [pc, #392]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002220:	e040      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d023      	beq.n	8002272 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222a:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff fb25 	bl	8001884 <HAL_GetTick>
 800223a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7ff fb21 	bl	8001884 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e2a0      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b54      	ldr	r3, [pc, #336]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	494e      	ldr	r1, [pc, #312]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	e018      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff fb01 	bl	8001884 <HAL_GetTick>
 8002282:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fafd 	bl	8001884 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e27c      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002298:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8082 	beq.w	80023b6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d05f      	beq.n	800237a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80022ba:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d037      	beq.n	8002340 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e254      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01b      	beq.n	800232a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f8:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002302:	f7ff fabf 	bl	8001884 <HAL_GetTick>
 8002306:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230a:	f7ff fabb 	bl	8001884 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b11      	cmp	r3, #17
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e23a      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ef      	bne.n	800230a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002330:	f023 0210 	bic.w	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	491a      	ldr	r1, [pc, #104]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff fa98 	bl	8001884 <HAL_GetTick>
 8002354:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fa94 	bl	8001884 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b11      	cmp	r3, #17
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e213      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ef      	beq.n	8002358 <HAL_RCC_OscConfig+0x478>
 8002378:	e01d      	b.n	80023b6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7ff fa7b 	bl	8001884 <HAL_GetTick>
 800238e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002392:	f7ff fa77 	bl	8001884 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b11      	cmp	r3, #17
 800239e:	d903      	bls.n	80023a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1f6      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
 80023a4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a8:	4ba9      	ldr	r3, [pc, #676]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ed      	bne.n	8002392 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80bd 	beq.w	800253e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023ca:	4ba1      	ldr	r3, [pc, #644]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10e      	bne.n	80023f4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b9e      	ldr	r3, [pc, #632]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a9d      	ldr	r2, [pc, #628]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	4b9b      	ldr	r3, [pc, #620]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f4:	4b97      	ldr	r3, [pc, #604]	; (8002654 <HAL_RCC_OscConfig+0x774>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002400:	4b94      	ldr	r3, [pc, #592]	; (8002654 <HAL_RCC_OscConfig+0x774>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a93      	ldr	r2, [pc, #588]	; (8002654 <HAL_RCC_OscConfig+0x774>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240c:	f7ff fa3a 	bl	8001884 <HAL_GetTick>
 8002410:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7ff fa36 	bl	8001884 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1b5      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x774>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02c      	beq.n	8002498 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800243e:	4b84      	ldr	r3, [pc, #528]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	497f      	ldr	r1, [pc, #508]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002464:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	4a79      	ldr	r2, [pc, #484]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002474:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002484:	e018      	b.n	80024b8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	4a70      	ldr	r2, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002496:	e00f      	b.n	80024b8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024a8:	4b69      	ldr	r3, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	4a68      	ldr	r2, [pc, #416]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff f9e0 	bl	8001884 <HAL_GetTick>
 80024c4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7ff f9dc 	bl	8001884 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e159      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ed      	beq.n	80024c8 <HAL_RCC_OscConfig+0x5e8>
 80024ec:	e01d      	b.n	800252a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7ff f9c9 	bl	8001884 <HAL_GetTick>
 80024f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7ff f9c5 	bl	8001884 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e142      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800250c:	4b50      	ldr	r3, [pc, #320]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ed      	bne.n	80024f6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800251a:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	4a4b      	ldr	r2, [pc, #300]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a46      	ldr	r2, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01c      	beq.n	800258c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002558:	4a3d      	ldr	r2, [pc, #244]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7ff f98f 	bl	8001884 <HAL_GetTick>
 8002566:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256a:	f7ff f98b 	bl	8001884 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e10a      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800257e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ef      	beq.n	800256a <HAL_RCC_OscConfig+0x68a>
 800258a:	e01b      	b.n	80025c4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800258e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002592:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff f972 	bl	8001884 <HAL_GetTick>
 80025a0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a4:	f7ff f96e 	bl	8001884 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0ed      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80025b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ef      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80e1 	beq.w	8002790 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	f040 80b5 	bne.w	8002742 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d124      	bne.n	8002636 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	3b01      	subs	r3, #1
 80025f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d11b      	bne.n	8002636 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d113      	bne.n	8002636 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	3b01      	subs	r3, #1
 800261c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d109      	bne.n	8002636 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d05f      	beq.n	80026f6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d05a      	beq.n	80026f2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002648:	f7ff f91c 	bl	8001884 <HAL_GetTick>
 800264c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264e:	e00c      	b.n	800266a <HAL_RCC_OscConfig+0x78a>
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff f914 	bl	8001884 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e093      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266a:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <HAL_RCC_OscConfig+0x8c0>)
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002686:	3a01      	subs	r2, #1
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002690:	0212      	lsls	r2, r2, #8
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002698:	0852      	lsrs	r2, r2, #1
 800269a:	3a01      	subs	r2, #1
 800269c:	0552      	lsls	r2, r2, #21
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a4:	0852      	lsrs	r2, r2, #1
 80026a6:	3a01      	subs	r2, #1
 80026a8:	0652      	lsls	r2, r2, #25
 80026aa:	430a      	orrs	r2, r1
 80026ac:	493b      	ldr	r1, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a39      	ldr	r2, [pc, #228]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026bc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026ca:	f7ff f8db 	bl	8001884 <HAL_GetTick>
 80026ce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7ff f8d7 	bl	8001884 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e056      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f0:	e04e      	b.n	8002790 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e04d      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d146      	bne.n	8002790 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a25      	ldr	r2, [pc, #148]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002718:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800271a:	f7ff f8b3 	bl	8001884 <HAL_GetTick>
 800271e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7ff f8af 	bl	8001884 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e02e      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x842>
 8002740:	e026      	b.n	8002790 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d021      	beq.n	800278c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff f896 	bl	8001884 <HAL_GetTick>
 8002758:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff f892 	bl	8001884 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e011      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_RCC_OscConfig+0x8bc>)
 8002780:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002784:	f023 0303 	bic.w	r3, r3, #3
 8002788:	60d3      	str	r3, [r2, #12]
 800278a:	e001      	b.n	8002790 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3728      	adds	r7, #40	; 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	f99f808c 	.word	0xf99f808c

080027a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0e7      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d910      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0207 	bic.w	r2, r3, #7
 80027ce:	4970      	ldr	r1, [pc, #448]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b6e      	ldr	r3, [pc, #440]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cf      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d010      	beq.n	8002816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	4b66      	ldr	r3, [pc, #408]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	429a      	cmp	r2, r3
 8002802:	d908      	bls.n	8002816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4960      	ldr	r1, [pc, #384]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d04c      	beq.n	80028bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d121      	bne.n	800287a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0a6      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d115      	bne.n	800287a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e09a      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800285a:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e08e      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e086      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800287a:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0203 	bic.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4943      	ldr	r1, [pc, #268]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fe fffa 	bl	8001884 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	e00a      	b.n	80028aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7fe fff6 	bl	8001884 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e06e      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 020c 	and.w	r2, r3, #12
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1eb      	bne.n	8002894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d208      	bcs.n	80028ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	492b      	ldr	r1, [pc, #172]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ea:	4b29      	ldr	r3, [pc, #164]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d210      	bcs.n	800291a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 0207 	bic.w	r2, r3, #7
 8002900:	4923      	ldr	r1, [pc, #140]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e036      	b.n	8002988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4918      	ldr	r1, [pc, #96]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4910      	ldr	r1, [pc, #64]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002958:	f000 f824 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	490b      	ldr	r1, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x1f4>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
 8002974:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1f8>)
 8002976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1fc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe ff31 	bl	80017e4 <HAL_InitTick>
 8002982:	4603      	mov	r3, r0
 8002984:	72fb      	strb	r3, [r7, #11]

  return status;
 8002986:	7afb      	ldrb	r3, [r7, #11]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40022000 	.word	0x40022000
 8002994:	40021000 	.word	0x40021000
 8002998:	080048ac 	.word	0x080048ac
 800299c:	2000009c 	.word	0x2000009c
 80029a0:	200000a0 	.word	0x200000a0

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x34>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d121      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d11e      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e005      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	e004      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d134      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d003      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xac>
 8002a48:	e005      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a4c:	617b      	str	r3, [r7, #20]
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a52:	617b      	str	r3, [r7, #20]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	617b      	str	r3, [r7, #20]
      break;
 8002a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	fb03 f202 	mul.w	r2, r3, r2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_GetSysClockFreq+0x108>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	0e5b      	lsrs	r3, r3, #25
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080048c4 	.word	0x080048c4
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000009c 	.word	0x2000009c

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4904      	ldr	r1, [pc, #16]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	080048bc 	.word	0x080048bc

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b04:	f7ff ffda 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0adb      	lsrs	r3, r3, #11
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	080048bc 	.word	0x080048bc

08002b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b44:	f7ff f968 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 8002b48:	6178      	str	r0, [r7, #20]
 8002b4a:	e014      	b.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b56:	6593      	str	r3, [r2, #88]	; 0x58
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b64:	f7ff f958 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 8002b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d10b      	bne.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d919      	bls.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2ba0      	cmp	r3, #160	; 0xa0
 8002b88:	d902      	bls.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e013      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b90:	2301      	movs	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e010      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d902      	bls.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e00a      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d102      	bne.n	8002bae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba8:	2302      	movs	r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e004      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d101      	bne.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0207 	bic.w	r2, r3, #7
 8002bc0:	4909      	ldr	r1, [pc, #36]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40022000 	.word	0x40022000

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 809e 	beq.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a3f      	ldr	r2, [pc, #252]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fe1a 	bl	8001884 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c52:	e009      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fe16 	bl	8001884 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	74fb      	strb	r3, [r7, #19]
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d15a      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01e      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d019      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fdd6 	bl	8001884 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fdd2 	bl	8001884 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cf2:	e006      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ec      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d1e:	e009      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d34:	7c7b      	ldrb	r3, [r7, #17]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b6e      	ldr	r3, [pc, #440]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a6d      	ldr	r2, [pc, #436]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d52:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 0203 	bic.w	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4964      	ldr	r1, [pc, #400]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d74:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	495c      	ldr	r1, [pc, #368]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d96:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4953      	ldr	r1, [pc, #332]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db8:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	494b      	ldr	r1, [pc, #300]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4942      	ldr	r1, [pc, #264]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dfc:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	493a      	ldr	r1, [pc, #232]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4931      	ldr	r1, [pc, #196]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e40:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	4929      	ldr	r1, [pc, #164]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4920      	ldr	r1, [pc, #128]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	4918      	ldr	r1, [pc, #96]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eae:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e040      	b.n	8002fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe faf4 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f992 	bl	8003280 <UART_SetConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e022      	b.n	8002fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fbe0 	bl	8003734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fc67 	bl	8003878 <UART_CheckIdleState>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	f040 8082 	bne.w	80030d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_UART_Transmit+0x26>
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07a      	b.n	80030d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Transmit+0x38>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e073      	b.n	80030d4 <HAL_UART_Transmit+0x120>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	; 0x21
 8003000:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fe fc3f 	bl	8001884 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x80>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003044:	e02d      	b.n	80030a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc5a 	bl	800390a <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e039      	b.n	80030d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003072:	b292      	uxth	r2, r2
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	3302      	adds	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	e008      	b.n	8003090 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b292      	uxth	r2, r2
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3301      	adds	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cb      	bne.n	8003046 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fc26 	bl	800390a <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e005      	b.n	80030d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 80bf 	bne.w	8003274 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_UART_Receive+0x26>
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0b7      	b.n	8003276 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive+0x38>
 8003110:	2302      	movs	r3, #2
 8003112:	e0b0      	b.n	8003276 <HAL_UART_Receive+0x19a>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2222      	movs	r2, #34	; 0x22
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003130:	f7fe fba8 	bl	8001884 <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d10e      	bne.n	800316e <HAL_UART_Receive+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_UART_Receive+0x88>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800315e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003162:	e02d      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	22ff      	movs	r2, #255	; 0xff
 8003168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800316c:	e028      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_UART_Receive+0xb6>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <HAL_UART_Receive+0xac>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003186:	e01b      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	227f      	movs	r2, #127	; 0x7f
 800318c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003190:	e016      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319a:	d10d      	bne.n	80031b8 <HAL_UART_Receive+0xdc>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_UART_Receive+0xd2>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	227f      	movs	r2, #127	; 0x7f
 80031a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ac:	e008      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	223f      	movs	r2, #63	; 0x3f
 80031b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b6:	e003      	b.n	80031c0 <HAL_UART_Receive+0xe4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d108      	bne.n	80031e4 <HAL_UART_Receive+0x108>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e003      	b.n	80031ec <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031f4:	e033      	b.n	800325e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2120      	movs	r1, #32
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fb82 	bl	800390a <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e032      	b.n	8003276 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800321c:	b29a      	uxth	r2, r3
 800321e:	8a7b      	ldrh	r3, [r7, #18]
 8003220:	4013      	ands	r3, r2
 8003222:	b29a      	uxth	r2, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3302      	adds	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e00d      	b.n	800324c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003236:	b29b      	uxth	r3, r3
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8a7b      	ldrh	r3, [r7, #18]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4013      	ands	r3, r2
 8003240:	b2da      	uxtb	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1c5      	bne.n	80031f6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b08a      	sub	sp, #40	; 0x28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b9e      	ldr	r3, [pc, #632]	; (8003528 <UART_SetConfig+0x2a8>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a93      	ldr	r2, [pc, #588]	; (800352c <UART_SetConfig+0x2ac>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e8:	4313      	orrs	r3, r2
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a8a      	ldr	r2, [pc, #552]	; (8003530 <UART_SetConfig+0x2b0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d126      	bne.n	8003358 <UART_SetConfig+0xd8>
 800330a:	4b8a      	ldr	r3, [pc, #552]	; (8003534 <UART_SetConfig+0x2b4>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b03      	cmp	r3, #3
 8003316:	d81b      	bhi.n	8003350 <UART_SetConfig+0xd0>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0xa0>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003331 	.word	0x08003331
 8003324:	08003341 	.word	0x08003341
 8003328:	08003339 	.word	0x08003339
 800332c:	08003349 	.word	0x08003349
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e0ab      	b.n	8003490 <UART_SetConfig+0x210>
 8003338:	2302      	movs	r3, #2
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e0a7      	b.n	8003490 <UART_SetConfig+0x210>
 8003340:	2304      	movs	r3, #4
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e0a3      	b.n	8003490 <UART_SetConfig+0x210>
 8003348:	2308      	movs	r3, #8
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e09f      	b.n	8003490 <UART_SetConfig+0x210>
 8003350:	2310      	movs	r3, #16
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e09b      	b.n	8003490 <UART_SetConfig+0x210>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a76      	ldr	r2, [pc, #472]	; (8003538 <UART_SetConfig+0x2b8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d138      	bne.n	80033d4 <UART_SetConfig+0x154>
 8003362:	4b74      	ldr	r3, [pc, #464]	; (8003534 <UART_SetConfig+0x2b4>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d82d      	bhi.n	80033cc <UART_SetConfig+0x14c>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0xf8>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	080033ad 	.word	0x080033ad
 800337c:	080033cd 	.word	0x080033cd
 8003380:	080033cd 	.word	0x080033cd
 8003384:	080033cd 	.word	0x080033cd
 8003388:	080033bd 	.word	0x080033bd
 800338c:	080033cd 	.word	0x080033cd
 8003390:	080033cd 	.word	0x080033cd
 8003394:	080033cd 	.word	0x080033cd
 8003398:	080033b5 	.word	0x080033b5
 800339c:	080033cd 	.word	0x080033cd
 80033a0:	080033cd 	.word	0x080033cd
 80033a4:	080033cd 	.word	0x080033cd
 80033a8:	080033c5 	.word	0x080033c5
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e06d      	b.n	8003490 <UART_SetConfig+0x210>
 80033b4:	2302      	movs	r3, #2
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e069      	b.n	8003490 <UART_SetConfig+0x210>
 80033bc:	2304      	movs	r3, #4
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e065      	b.n	8003490 <UART_SetConfig+0x210>
 80033c4:	2308      	movs	r3, #8
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e061      	b.n	8003490 <UART_SetConfig+0x210>
 80033cc:	2310      	movs	r3, #16
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	e05d      	b.n	8003490 <UART_SetConfig+0x210>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a58      	ldr	r2, [pc, #352]	; (800353c <UART_SetConfig+0x2bc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d125      	bne.n	800342a <UART_SetConfig+0x1aa>
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <UART_SetConfig+0x2b4>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033e8:	2b30      	cmp	r3, #48	; 0x30
 80033ea:	d016      	beq.n	800341a <UART_SetConfig+0x19a>
 80033ec:	2b30      	cmp	r3, #48	; 0x30
 80033ee:	d818      	bhi.n	8003422 <UART_SetConfig+0x1a2>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d00a      	beq.n	800340a <UART_SetConfig+0x18a>
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d814      	bhi.n	8003422 <UART_SetConfig+0x1a2>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <UART_SetConfig+0x182>
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d008      	beq.n	8003412 <UART_SetConfig+0x192>
 8003400:	e00f      	b.n	8003422 <UART_SetConfig+0x1a2>
 8003402:	2300      	movs	r3, #0
 8003404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003408:	e042      	b.n	8003490 <UART_SetConfig+0x210>
 800340a:	2302      	movs	r3, #2
 800340c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003410:	e03e      	b.n	8003490 <UART_SetConfig+0x210>
 8003412:	2304      	movs	r3, #4
 8003414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003418:	e03a      	b.n	8003490 <UART_SetConfig+0x210>
 800341a:	2308      	movs	r3, #8
 800341c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003420:	e036      	b.n	8003490 <UART_SetConfig+0x210>
 8003422:	2310      	movs	r3, #16
 8003424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003428:	e032      	b.n	8003490 <UART_SetConfig+0x210>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3f      	ldr	r2, [pc, #252]	; (800352c <UART_SetConfig+0x2ac>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d12a      	bne.n	800348a <UART_SetConfig+0x20a>
 8003434:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <UART_SetConfig+0x2b4>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800343e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003442:	d01a      	beq.n	800347a <UART_SetConfig+0x1fa>
 8003444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003448:	d81b      	bhi.n	8003482 <UART_SetConfig+0x202>
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344e:	d00c      	beq.n	800346a <UART_SetConfig+0x1ea>
 8003450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003454:	d815      	bhi.n	8003482 <UART_SetConfig+0x202>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <UART_SetConfig+0x1e2>
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d008      	beq.n	8003472 <UART_SetConfig+0x1f2>
 8003460:	e00f      	b.n	8003482 <UART_SetConfig+0x202>
 8003462:	2300      	movs	r3, #0
 8003464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003468:	e012      	b.n	8003490 <UART_SetConfig+0x210>
 800346a:	2302      	movs	r3, #2
 800346c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003470:	e00e      	b.n	8003490 <UART_SetConfig+0x210>
 8003472:	2304      	movs	r3, #4
 8003474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003478:	e00a      	b.n	8003490 <UART_SetConfig+0x210>
 800347a:	2308      	movs	r3, #8
 800347c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003480:	e006      	b.n	8003490 <UART_SetConfig+0x210>
 8003482:	2310      	movs	r3, #16
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003488:	e002      	b.n	8003490 <UART_SetConfig+0x210>
 800348a:	2310      	movs	r3, #16
 800348c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a25      	ldr	r2, [pc, #148]	; (800352c <UART_SetConfig+0x2ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	f040 808a 	bne.w	80035b0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800349c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d824      	bhi.n	80034ee <UART_SetConfig+0x26e>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <UART_SetConfig+0x22c>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034ef 	.word	0x080034ef
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	080034df 	.word	0x080034df
 80034c0:	080034ef 	.word	0x080034ef
 80034c4:	080034ef 	.word	0x080034ef
 80034c8:	080034ef 	.word	0x080034ef
 80034cc:	080034e7 	.word	0x080034e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7ff fb00 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80034d4:	61f8      	str	r0, [r7, #28]
        break;
 80034d6:	e010      	b.n	80034fa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <UART_SetConfig+0x2c0>)
 80034da:	61fb      	str	r3, [r7, #28]
        break;
 80034dc:	e00d      	b.n	80034fa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7ff fa61 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 80034e2:	61f8      	str	r0, [r7, #28]
        break;
 80034e4:	e009      	b.n	80034fa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ea:	61fb      	str	r3, [r7, #28]
        break;
 80034ec:	e005      	b.n	80034fa <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8109 	beq.w	8003714 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	429a      	cmp	r2, r3
 8003510:	d305      	bcc.n	800351e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	429a      	cmp	r2, r3
 800351c:	d912      	bls.n	8003544 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003524:	e0f6      	b.n	8003714 <UART_SetConfig+0x494>
 8003526:	bf00      	nop
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40008000 	.word	0x40008000
 8003530:	40013800 	.word	0x40013800
 8003534:	40021000 	.word	0x40021000
 8003538:	40004400 	.word	0x40004400
 800353c:	40004800 	.word	0x40004800
 8003540:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2200      	movs	r2, #0
 8003548:	461c      	mov	r4, r3
 800354a:	4615      	mov	r5, r2
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	022b      	lsls	r3, r5, #8
 8003556:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800355a:	0222      	lsls	r2, r4, #8
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	6849      	ldr	r1, [r1, #4]
 8003560:	0849      	lsrs	r1, r1, #1
 8003562:	2000      	movs	r0, #0
 8003564:	4688      	mov	r8, r1
 8003566:	4681      	mov	r9, r0
 8003568:	eb12 0a08 	adds.w	sl, r2, r8
 800356c:	eb43 0b09 	adc.w	fp, r3, r9
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800357e:	4650      	mov	r0, sl
 8003580:	4659      	mov	r1, fp
 8003582:	f7fc fe7d 	bl	8000280 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4613      	mov	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003594:	d308      	bcc.n	80035a8 <UART_SetConfig+0x328>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359c:	d204      	bcs.n	80035a8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	e0b5      	b.n	8003714 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035ae:	e0b1      	b.n	8003714 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b8:	d15d      	bne.n	8003676 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80035ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d827      	bhi.n	8003612 <UART_SetConfig+0x392>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x348>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff fa72 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80035f0:	61f8      	str	r0, [r7, #28]
        break;
 80035f2:	e014      	b.n	800361e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff fa84 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 80035f8:	61f8      	str	r0, [r7, #28]
        break;
 80035fa:	e010      	b.n	800361e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <UART_SetConfig+0x4b0>)
 80035fe:	61fb      	str	r3, [r7, #28]
        break;
 8003600:	e00d      	b.n	800361e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7ff f9cf 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003606:	61f8      	str	r0, [r7, #28]
        break;
 8003608:	e009      	b.n	800361e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	61fb      	str	r3, [r7, #28]
        break;
 8003610:	e005      	b.n	800361e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800361c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d077      	beq.n	8003714 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005a      	lsls	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b0f      	cmp	r3, #15
 800363e:	d916      	bls.n	800366e <UART_SetConfig+0x3ee>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003646:	d212      	bcs.n	800366e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f023 030f 	bic.w	r3, r3, #15
 8003650:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	b29b      	uxth	r3, r3
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	b29a      	uxth	r2, r3
 800365e:	8afb      	ldrh	r3, [r7, #22]
 8003660:	4313      	orrs	r3, r2
 8003662:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	8afa      	ldrh	r2, [r7, #22]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	e052      	b.n	8003714 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003674:	e04e      	b.n	8003714 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800367a:	2b08      	cmp	r3, #8
 800367c:	d827      	bhi.n	80036ce <UART_SetConfig+0x44e>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <UART_SetConfig+0x404>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036a9 	.word	0x080036a9
 8003688:	080036b1 	.word	0x080036b1
 800368c:	080036b9 	.word	0x080036b9
 8003690:	080036cf 	.word	0x080036cf
 8003694:	080036bf 	.word	0x080036bf
 8003698:	080036cf 	.word	0x080036cf
 800369c:	080036cf 	.word	0x080036cf
 80036a0:	080036cf 	.word	0x080036cf
 80036a4:	080036c7 	.word	0x080036c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a8:	f7ff fa14 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80036ac:	61f8      	str	r0, [r7, #28]
        break;
 80036ae:	e014      	b.n	80036da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b0:	f7ff fa26 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 80036b4:	61f8      	str	r0, [r7, #28]
        break;
 80036b6:	e010      	b.n	80036da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <UART_SetConfig+0x4b0>)
 80036ba:	61fb      	str	r3, [r7, #28]
        break;
 80036bc:	e00d      	b.n	80036da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036be:	f7ff f971 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 80036c2:	61f8      	str	r0, [r7, #28]
        break;
 80036c4:	e009      	b.n	80036da <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ca:	61fb      	str	r3, [r7, #28]
        break;
 80036cc:	e005      	b.n	80036da <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036d8:	bf00      	nop
    }

    if (pclk != 0U)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d019      	beq.n	8003714 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	085a      	lsrs	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	441a      	add	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b0f      	cmp	r3, #15
 80036f8:	d909      	bls.n	800370e <UART_SetConfig+0x48e>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d205      	bcs.n	800370e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	e002      	b.n	8003714 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003720:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003724:	4618      	mov	r0, r3
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372e:	bf00      	nop
 8003730:	00f42400 	.word	0x00f42400

08003734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01a      	beq.n	800384a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003832:	d10a      	bne.n	800384a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	605a      	str	r2, [r3, #4]
  }
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af02      	add	r7, sp, #8
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003888:	f7fd fffc 	bl	8001884 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b08      	cmp	r3, #8
 800389a:	d10e      	bne.n	80038ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f82d 	bl	800390a <UART_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e023      	b.n	8003902 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d10e      	bne.n	80038e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f817 	bl	800390a <UART_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e00d      	b.n	8003902 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b09c      	sub	sp, #112	; 0x70
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391a:	e0a5      	b.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	f000 80a1 	beq.w	8003a68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fd ffad 	bl	8001884 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <UART_WaitOnFlagUntilTimeout+0x32>
 8003936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003938:	2b00      	cmp	r3, #0
 800393a:	d13e      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003950:	667b      	str	r3, [r7, #100]	; 0x64
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800395c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e6      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	663b      	str	r3, [r7, #96]	; 0x60
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800398e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003990:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e067      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d04f      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d6:	d147      	bne.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
 8003a02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	613b      	str	r3, [r7, #16]
   return(result);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a34:	623a      	str	r2, [r7, #32]
 8003a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69f9      	ldr	r1, [r7, #28]
 8003a3a:	6a3a      	ldr	r2, [r7, #32]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e010      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	f43f af4a 	beq.w	800391c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3770      	adds	r7, #112	; 0x70
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <__errno>:
 8003a94:	4b01      	ldr	r3, [pc, #4]	; (8003a9c <__errno+0x8>)
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	200000a8 	.word	0x200000a8

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4d0d      	ldr	r5, [pc, #52]	; (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	; (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1b64      	subs	r4, r4, r5
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	42a6      	cmp	r6, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4d0b      	ldr	r5, [pc, #44]	; (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	; (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f000 fd5a 	bl	800456c <_init>
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2600      	movs	r6, #0
 8003abe:	42a6      	cmp	r6, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac8:	4798      	blx	r3
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad2:	4798      	blx	r3
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08004a30 	.word	0x08004a30
 8003adc:	08004a30 	.word	0x08004a30
 8003ae0:	08004a30 	.word	0x08004a30
 8003ae4:	08004a34 	.word	0x08004a34

08003ae8 <malloc>:
 8003ae8:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <malloc+0xc>)
 8003aea:	4601      	mov	r1, r0
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f000 b87f 	b.w	8003bf0 <_malloc_r>
 8003af2:	bf00      	nop
 8003af4:	200000a8 	.word	0x200000a8

08003af8 <free>:
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <free+0xc>)
 8003afa:	4601      	mov	r1, r0
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f000 b80b 	b.w	8003b18 <_free_r>
 8003b02:	bf00      	nop
 8003b04:	200000a8 	.word	0x200000a8

08003b08 <memset>:
 8003b08:	4402      	add	r2, r0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	f803 1b01 	strb.w	r1, [r3], #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <_free_r>:
 8003b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b1a:	2900      	cmp	r1, #0
 8003b1c:	d044      	beq.n	8003ba8 <_free_r+0x90>
 8003b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b22:	9001      	str	r0, [sp, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f1a1 0404 	sub.w	r4, r1, #4
 8003b2a:	bfb8      	it	lt
 8003b2c:	18e4      	addlt	r4, r4, r3
 8003b2e:	f000 f9bf 	bl	8003eb0 <__malloc_lock>
 8003b32:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <_free_r+0x94>)
 8003b34:	9801      	ldr	r0, [sp, #4]
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	b933      	cbnz	r3, 8003b48 <_free_r+0x30>
 8003b3a:	6063      	str	r3, [r4, #4]
 8003b3c:	6014      	str	r4, [r2, #0]
 8003b3e:	b003      	add	sp, #12
 8003b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b44:	f000 b9ba 	b.w	8003ebc <__malloc_unlock>
 8003b48:	42a3      	cmp	r3, r4
 8003b4a:	d908      	bls.n	8003b5e <_free_r+0x46>
 8003b4c:	6825      	ldr	r5, [r4, #0]
 8003b4e:	1961      	adds	r1, r4, r5
 8003b50:	428b      	cmp	r3, r1
 8003b52:	bf01      	itttt	eq
 8003b54:	6819      	ldreq	r1, [r3, #0]
 8003b56:	685b      	ldreq	r3, [r3, #4]
 8003b58:	1949      	addeq	r1, r1, r5
 8003b5a:	6021      	streq	r1, [r4, #0]
 8003b5c:	e7ed      	b.n	8003b3a <_free_r+0x22>
 8003b5e:	461a      	mov	r2, r3
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b10b      	cbz	r3, 8003b68 <_free_r+0x50>
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d9fa      	bls.n	8003b5e <_free_r+0x46>
 8003b68:	6811      	ldr	r1, [r2, #0]
 8003b6a:	1855      	adds	r5, r2, r1
 8003b6c:	42a5      	cmp	r5, r4
 8003b6e:	d10b      	bne.n	8003b88 <_free_r+0x70>
 8003b70:	6824      	ldr	r4, [r4, #0]
 8003b72:	4421      	add	r1, r4
 8003b74:	1854      	adds	r4, r2, r1
 8003b76:	42a3      	cmp	r3, r4
 8003b78:	6011      	str	r1, [r2, #0]
 8003b7a:	d1e0      	bne.n	8003b3e <_free_r+0x26>
 8003b7c:	681c      	ldr	r4, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	6053      	str	r3, [r2, #4]
 8003b82:	4421      	add	r1, r4
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	e7da      	b.n	8003b3e <_free_r+0x26>
 8003b88:	d902      	bls.n	8003b90 <_free_r+0x78>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	6003      	str	r3, [r0, #0]
 8003b8e:	e7d6      	b.n	8003b3e <_free_r+0x26>
 8003b90:	6825      	ldr	r5, [r4, #0]
 8003b92:	1961      	adds	r1, r4, r5
 8003b94:	428b      	cmp	r3, r1
 8003b96:	bf04      	itt	eq
 8003b98:	6819      	ldreq	r1, [r3, #0]
 8003b9a:	685b      	ldreq	r3, [r3, #4]
 8003b9c:	6063      	str	r3, [r4, #4]
 8003b9e:	bf04      	itt	eq
 8003ba0:	1949      	addeq	r1, r1, r5
 8003ba2:	6021      	streq	r1, [r4, #0]
 8003ba4:	6054      	str	r4, [r2, #4]
 8003ba6:	e7ca      	b.n	8003b3e <_free_r+0x26>
 8003ba8:	b003      	add	sp, #12
 8003baa:	bd30      	pop	{r4, r5, pc}
 8003bac:	2000035c 	.word	0x2000035c

08003bb0 <sbrk_aligned>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	4e0e      	ldr	r6, [pc, #56]	; (8003bec <sbrk_aligned+0x3c>)
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	6831      	ldr	r1, [r6, #0]
 8003bb8:	4605      	mov	r5, r0
 8003bba:	b911      	cbnz	r1, 8003bc2 <sbrk_aligned+0x12>
 8003bbc:	f000 f88c 	bl	8003cd8 <_sbrk_r>
 8003bc0:	6030      	str	r0, [r6, #0]
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f000 f887 	bl	8003cd8 <_sbrk_r>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	d00a      	beq.n	8003be4 <sbrk_aligned+0x34>
 8003bce:	1cc4      	adds	r4, r0, #3
 8003bd0:	f024 0403 	bic.w	r4, r4, #3
 8003bd4:	42a0      	cmp	r0, r4
 8003bd6:	d007      	beq.n	8003be8 <sbrk_aligned+0x38>
 8003bd8:	1a21      	subs	r1, r4, r0
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 f87c 	bl	8003cd8 <_sbrk_r>
 8003be0:	3001      	adds	r0, #1
 8003be2:	d101      	bne.n	8003be8 <sbrk_aligned+0x38>
 8003be4:	f04f 34ff 	mov.w	r4, #4294967295
 8003be8:	4620      	mov	r0, r4
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	20000360 	.word	0x20000360

08003bf0 <_malloc_r>:
 8003bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf4:	1ccd      	adds	r5, r1, #3
 8003bf6:	f025 0503 	bic.w	r5, r5, #3
 8003bfa:	3508      	adds	r5, #8
 8003bfc:	2d0c      	cmp	r5, #12
 8003bfe:	bf38      	it	cc
 8003c00:	250c      	movcc	r5, #12
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	4607      	mov	r7, r0
 8003c06:	db01      	blt.n	8003c0c <_malloc_r+0x1c>
 8003c08:	42a9      	cmp	r1, r5
 8003c0a:	d905      	bls.n	8003c18 <_malloc_r+0x28>
 8003c0c:	230c      	movs	r3, #12
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	2600      	movs	r6, #0
 8003c12:	4630      	mov	r0, r6
 8003c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c18:	4e2e      	ldr	r6, [pc, #184]	; (8003cd4 <_malloc_r+0xe4>)
 8003c1a:	f000 f949 	bl	8003eb0 <__malloc_lock>
 8003c1e:	6833      	ldr	r3, [r6, #0]
 8003c20:	461c      	mov	r4, r3
 8003c22:	bb34      	cbnz	r4, 8003c72 <_malloc_r+0x82>
 8003c24:	4629      	mov	r1, r5
 8003c26:	4638      	mov	r0, r7
 8003c28:	f7ff ffc2 	bl	8003bb0 <sbrk_aligned>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	4604      	mov	r4, r0
 8003c30:	d14d      	bne.n	8003cce <_malloc_r+0xde>
 8003c32:	6834      	ldr	r4, [r6, #0]
 8003c34:	4626      	mov	r6, r4
 8003c36:	2e00      	cmp	r6, #0
 8003c38:	d140      	bne.n	8003cbc <_malloc_r+0xcc>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	4631      	mov	r1, r6
 8003c3e:	4638      	mov	r0, r7
 8003c40:	eb04 0803 	add.w	r8, r4, r3
 8003c44:	f000 f848 	bl	8003cd8 <_sbrk_r>
 8003c48:	4580      	cmp	r8, r0
 8003c4a:	d13a      	bne.n	8003cc2 <_malloc_r+0xd2>
 8003c4c:	6821      	ldr	r1, [r4, #0]
 8003c4e:	3503      	adds	r5, #3
 8003c50:	1a6d      	subs	r5, r5, r1
 8003c52:	f025 0503 	bic.w	r5, r5, #3
 8003c56:	3508      	adds	r5, #8
 8003c58:	2d0c      	cmp	r5, #12
 8003c5a:	bf38      	it	cc
 8003c5c:	250c      	movcc	r5, #12
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4638      	mov	r0, r7
 8003c62:	f7ff ffa5 	bl	8003bb0 <sbrk_aligned>
 8003c66:	3001      	adds	r0, #1
 8003c68:	d02b      	beq.n	8003cc2 <_malloc_r+0xd2>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	442b      	add	r3, r5
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	e00e      	b.n	8003c90 <_malloc_r+0xa0>
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	1b52      	subs	r2, r2, r5
 8003c76:	d41e      	bmi.n	8003cb6 <_malloc_r+0xc6>
 8003c78:	2a0b      	cmp	r2, #11
 8003c7a:	d916      	bls.n	8003caa <_malloc_r+0xba>
 8003c7c:	1961      	adds	r1, r4, r5
 8003c7e:	42a3      	cmp	r3, r4
 8003c80:	6025      	str	r5, [r4, #0]
 8003c82:	bf18      	it	ne
 8003c84:	6059      	strne	r1, [r3, #4]
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	bf08      	it	eq
 8003c8a:	6031      	streq	r1, [r6, #0]
 8003c8c:	5162      	str	r2, [r4, r5]
 8003c8e:	604b      	str	r3, [r1, #4]
 8003c90:	4638      	mov	r0, r7
 8003c92:	f104 060b 	add.w	r6, r4, #11
 8003c96:	f000 f911 	bl	8003ebc <__malloc_unlock>
 8003c9a:	f026 0607 	bic.w	r6, r6, #7
 8003c9e:	1d23      	adds	r3, r4, #4
 8003ca0:	1af2      	subs	r2, r6, r3
 8003ca2:	d0b6      	beq.n	8003c12 <_malloc_r+0x22>
 8003ca4:	1b9b      	subs	r3, r3, r6
 8003ca6:	50a3      	str	r3, [r4, r2]
 8003ca8:	e7b3      	b.n	8003c12 <_malloc_r+0x22>
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	bf0c      	ite	eq
 8003cb0:	6032      	streq	r2, [r6, #0]
 8003cb2:	605a      	strne	r2, [r3, #4]
 8003cb4:	e7ec      	b.n	8003c90 <_malloc_r+0xa0>
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	6864      	ldr	r4, [r4, #4]
 8003cba:	e7b2      	b.n	8003c22 <_malloc_r+0x32>
 8003cbc:	4634      	mov	r4, r6
 8003cbe:	6876      	ldr	r6, [r6, #4]
 8003cc0:	e7b9      	b.n	8003c36 <_malloc_r+0x46>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	f000 f8f8 	bl	8003ebc <__malloc_unlock>
 8003ccc:	e7a1      	b.n	8003c12 <_malloc_r+0x22>
 8003cce:	6025      	str	r5, [r4, #0]
 8003cd0:	e7de      	b.n	8003c90 <_malloc_r+0xa0>
 8003cd2:	bf00      	nop
 8003cd4:	2000035c 	.word	0x2000035c

08003cd8 <_sbrk_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_sbrk_r+0x1c>)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fd fcf4 	bl	80016d0 <_sbrk>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_sbrk_r+0x1a>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_sbrk_r+0x1a>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	20000364 	.word	0x20000364

08003cf8 <sniprintf>:
 8003cf8:	b40c      	push	{r2, r3}
 8003cfa:	b530      	push	{r4, r5, lr}
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <sniprintf+0x64>)
 8003cfe:	1e0c      	subs	r4, r1, #0
 8003d00:	681d      	ldr	r5, [r3, #0]
 8003d02:	b09d      	sub	sp, #116	; 0x74
 8003d04:	da08      	bge.n	8003d18 <sniprintf+0x20>
 8003d06:	238b      	movs	r3, #139	; 0x8b
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	b01d      	add	sp, #116	; 0x74
 8003d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d14:	b002      	add	sp, #8
 8003d16:	4770      	bx	lr
 8003d18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d20:	bf14      	ite	ne
 8003d22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d26:	4623      	moveq	r3, r4
 8003d28:	9304      	str	r3, [sp, #16]
 8003d2a:	9307      	str	r3, [sp, #28]
 8003d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d30:	9002      	str	r0, [sp, #8]
 8003d32:	9006      	str	r0, [sp, #24]
 8003d34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d3a:	ab21      	add	r3, sp, #132	; 0x84
 8003d3c:	a902      	add	r1, sp, #8
 8003d3e:	4628      	mov	r0, r5
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	f000 f91d 	bl	8003f80 <_svfiprintf_r>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	bfbc      	itt	lt
 8003d4a:	238b      	movlt	r3, #139	; 0x8b
 8003d4c:	602b      	strlt	r3, [r5, #0]
 8003d4e:	2c00      	cmp	r4, #0
 8003d50:	d0dd      	beq.n	8003d0e <sniprintf+0x16>
 8003d52:	9b02      	ldr	r3, [sp, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e7d9      	b.n	8003d0e <sniprintf+0x16>
 8003d5a:	bf00      	nop
 8003d5c:	200000a8 	.word	0x200000a8

08003d60 <siprintf>:
 8003d60:	b40e      	push	{r1, r2, r3}
 8003d62:	b500      	push	{lr}
 8003d64:	b09c      	sub	sp, #112	; 0x70
 8003d66:	ab1d      	add	r3, sp, #116	; 0x74
 8003d68:	9002      	str	r0, [sp, #8]
 8003d6a:	9006      	str	r0, [sp, #24]
 8003d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d70:	4809      	ldr	r0, [pc, #36]	; (8003d98 <siprintf+0x38>)
 8003d72:	9107      	str	r1, [sp, #28]
 8003d74:	9104      	str	r1, [sp, #16]
 8003d76:	4909      	ldr	r1, [pc, #36]	; (8003d9c <siprintf+0x3c>)
 8003d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d7c:	9105      	str	r1, [sp, #20]
 8003d7e:	6800      	ldr	r0, [r0, #0]
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	a902      	add	r1, sp, #8
 8003d84:	f000 f8fc 	bl	8003f80 <_svfiprintf_r>
 8003d88:	9b02      	ldr	r3, [sp, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	b01c      	add	sp, #112	; 0x70
 8003d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d94:	b003      	add	sp, #12
 8003d96:	4770      	bx	lr
 8003d98:	200000a8 	.word	0x200000a8
 8003d9c:	ffff0208 	.word	0xffff0208

08003da0 <strnlen>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4602      	mov	r2, r0
 8003da4:	4401      	add	r1, r0
 8003da6:	428a      	cmp	r2, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	d003      	beq.n	8003db4 <strnlen+0x14>
 8003dac:	781c      	ldrb	r4, [r3, #0]
 8003dae:	3201      	adds	r2, #1
 8003db0:	2c00      	cmp	r4, #0
 8003db2:	d1f8      	bne.n	8003da6 <strnlen+0x6>
 8003db4:	1a18      	subs	r0, r3, r0
 8003db6:	bd10      	pop	{r4, pc}

08003db8 <_strtoul_l.constprop.0>:
 8003db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dbc:	4f36      	ldr	r7, [pc, #216]	; (8003e98 <_strtoul_l.constprop.0+0xe0>)
 8003dbe:	4686      	mov	lr, r0
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dc8:	5de6      	ldrb	r6, [r4, r7]
 8003dca:	f016 0608 	ands.w	r6, r6, #8
 8003dce:	d1f8      	bne.n	8003dc2 <_strtoul_l.constprop.0+0xa>
 8003dd0:	2c2d      	cmp	r4, #45	; 0x2d
 8003dd2:	d12f      	bne.n	8003e34 <_strtoul_l.constprop.0+0x7c>
 8003dd4:	782c      	ldrb	r4, [r5, #0]
 8003dd6:	2601      	movs	r6, #1
 8003dd8:	1c85      	adds	r5, r0, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d057      	beq.n	8003e8e <_strtoul_l.constprop.0+0xd6>
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d109      	bne.n	8003df6 <_strtoul_l.constprop.0+0x3e>
 8003de2:	2c30      	cmp	r4, #48	; 0x30
 8003de4:	d107      	bne.n	8003df6 <_strtoul_l.constprop.0+0x3e>
 8003de6:	7828      	ldrb	r0, [r5, #0]
 8003de8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003dec:	2858      	cmp	r0, #88	; 0x58
 8003dee:	d149      	bne.n	8003e84 <_strtoul_l.constprop.0+0xcc>
 8003df0:	786c      	ldrb	r4, [r5, #1]
 8003df2:	2310      	movs	r3, #16
 8003df4:	3502      	adds	r5, #2
 8003df6:	f04f 38ff 	mov.w	r8, #4294967295
 8003dfa:	2700      	movs	r7, #0
 8003dfc:	fbb8 f8f3 	udiv	r8, r8, r3
 8003e00:	fb03 f908 	mul.w	r9, r3, r8
 8003e04:	ea6f 0909 	mvn.w	r9, r9
 8003e08:	4638      	mov	r0, r7
 8003e0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003e0e:	f1bc 0f09 	cmp.w	ip, #9
 8003e12:	d814      	bhi.n	8003e3e <_strtoul_l.constprop.0+0x86>
 8003e14:	4664      	mov	r4, ip
 8003e16:	42a3      	cmp	r3, r4
 8003e18:	dd22      	ble.n	8003e60 <_strtoul_l.constprop.0+0xa8>
 8003e1a:	2f00      	cmp	r7, #0
 8003e1c:	db1d      	blt.n	8003e5a <_strtoul_l.constprop.0+0xa2>
 8003e1e:	4580      	cmp	r8, r0
 8003e20:	d31b      	bcc.n	8003e5a <_strtoul_l.constprop.0+0xa2>
 8003e22:	d101      	bne.n	8003e28 <_strtoul_l.constprop.0+0x70>
 8003e24:	45a1      	cmp	r9, r4
 8003e26:	db18      	blt.n	8003e5a <_strtoul_l.constprop.0+0xa2>
 8003e28:	fb00 4003 	mla	r0, r0, r3, r4
 8003e2c:	2701      	movs	r7, #1
 8003e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e32:	e7ea      	b.n	8003e0a <_strtoul_l.constprop.0+0x52>
 8003e34:	2c2b      	cmp	r4, #43	; 0x2b
 8003e36:	bf04      	itt	eq
 8003e38:	782c      	ldrbeq	r4, [r5, #0]
 8003e3a:	1c85      	addeq	r5, r0, #2
 8003e3c:	e7cd      	b.n	8003dda <_strtoul_l.constprop.0+0x22>
 8003e3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003e42:	f1bc 0f19 	cmp.w	ip, #25
 8003e46:	d801      	bhi.n	8003e4c <_strtoul_l.constprop.0+0x94>
 8003e48:	3c37      	subs	r4, #55	; 0x37
 8003e4a:	e7e4      	b.n	8003e16 <_strtoul_l.constprop.0+0x5e>
 8003e4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003e50:	f1bc 0f19 	cmp.w	ip, #25
 8003e54:	d804      	bhi.n	8003e60 <_strtoul_l.constprop.0+0xa8>
 8003e56:	3c57      	subs	r4, #87	; 0x57
 8003e58:	e7dd      	b.n	8003e16 <_strtoul_l.constprop.0+0x5e>
 8003e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8003e5e:	e7e6      	b.n	8003e2e <_strtoul_l.constprop.0+0x76>
 8003e60:	2f00      	cmp	r7, #0
 8003e62:	da07      	bge.n	8003e74 <_strtoul_l.constprop.0+0xbc>
 8003e64:	2322      	movs	r3, #34	; 0x22
 8003e66:	f8ce 3000 	str.w	r3, [lr]
 8003e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6e:	b932      	cbnz	r2, 8003e7e <_strtoul_l.constprop.0+0xc6>
 8003e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e74:	b106      	cbz	r6, 8003e78 <_strtoul_l.constprop.0+0xc0>
 8003e76:	4240      	negs	r0, r0
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d0f9      	beq.n	8003e70 <_strtoul_l.constprop.0+0xb8>
 8003e7c:	b107      	cbz	r7, 8003e80 <_strtoul_l.constprop.0+0xc8>
 8003e7e:	1e69      	subs	r1, r5, #1
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	e7f5      	b.n	8003e70 <_strtoul_l.constprop.0+0xb8>
 8003e84:	2430      	movs	r4, #48	; 0x30
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1b5      	bne.n	8003df6 <_strtoul_l.constprop.0+0x3e>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	e7b3      	b.n	8003df6 <_strtoul_l.constprop.0+0x3e>
 8003e8e:	2c30      	cmp	r4, #48	; 0x30
 8003e90:	d0a9      	beq.n	8003de6 <_strtoul_l.constprop.0+0x2e>
 8003e92:	230a      	movs	r3, #10
 8003e94:	e7af      	b.n	8003df6 <_strtoul_l.constprop.0+0x3e>
 8003e96:	bf00      	nop
 8003e98:	080048f5 	.word	0x080048f5

08003e9c <strtoul>:
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4802      	ldr	r0, [pc, #8]	; (8003eac <strtoul+0x10>)
 8003ea4:	6800      	ldr	r0, [r0, #0]
 8003ea6:	f7ff bf87 	b.w	8003db8 <_strtoul_l.constprop.0>
 8003eaa:	bf00      	nop
 8003eac:	200000a8 	.word	0x200000a8

08003eb0 <__malloc_lock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__malloc_lock+0x8>)
 8003eb2:	f000 baf9 	b.w	80044a8 <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20000368 	.word	0x20000368

08003ebc <__malloc_unlock>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	; (8003ec4 <__malloc_unlock+0x8>)
 8003ebe:	f000 baf4 	b.w	80044aa <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	20000368 	.word	0x20000368

08003ec8 <__ssputs_r>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	688e      	ldr	r6, [r1, #8]
 8003ece:	429e      	cmp	r6, r3
 8003ed0:	4682      	mov	sl, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4690      	mov	r8, r2
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	d838      	bhi.n	8003f4c <__ssputs_r+0x84>
 8003eda:	898a      	ldrh	r2, [r1, #12]
 8003edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ee0:	d032      	beq.n	8003f48 <__ssputs_r+0x80>
 8003ee2:	6825      	ldr	r5, [r4, #0]
 8003ee4:	6909      	ldr	r1, [r1, #16]
 8003ee6:	eba5 0901 	sub.w	r9, r5, r1
 8003eea:	6965      	ldr	r5, [r4, #20]
 8003eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	444b      	add	r3, r9
 8003ef8:	106d      	asrs	r5, r5, #1
 8003efa:	429d      	cmp	r5, r3
 8003efc:	bf38      	it	cc
 8003efe:	461d      	movcc	r5, r3
 8003f00:	0553      	lsls	r3, r2, #21
 8003f02:	d531      	bpl.n	8003f68 <__ssputs_r+0xa0>
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7ff fe73 	bl	8003bf0 <_malloc_r>
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	b950      	cbnz	r0, 8003f24 <__ssputs_r+0x5c>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	f8ca 3000 	str.w	r3, [sl]
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f24:	6921      	ldr	r1, [r4, #16]
 8003f26:	464a      	mov	r2, r9
 8003f28:	f000 fac0 	bl	80044ac <memcpy>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f36:	81a3      	strh	r3, [r4, #12]
 8003f38:	6126      	str	r6, [r4, #16]
 8003f3a:	6165      	str	r5, [r4, #20]
 8003f3c:	444e      	add	r6, r9
 8003f3e:	eba5 0509 	sub.w	r5, r5, r9
 8003f42:	6026      	str	r6, [r4, #0]
 8003f44:	60a5      	str	r5, [r4, #8]
 8003f46:	463e      	mov	r6, r7
 8003f48:	42be      	cmp	r6, r7
 8003f4a:	d900      	bls.n	8003f4e <__ssputs_r+0x86>
 8003f4c:	463e      	mov	r6, r7
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	4632      	mov	r2, r6
 8003f52:	4641      	mov	r1, r8
 8003f54:	f000 fab8 	bl	80044c8 <memmove>
 8003f58:	68a3      	ldr	r3, [r4, #8]
 8003f5a:	1b9b      	subs	r3, r3, r6
 8003f5c:	60a3      	str	r3, [r4, #8]
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	4433      	add	r3, r6
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2000      	movs	r0, #0
 8003f66:	e7db      	b.n	8003f20 <__ssputs_r+0x58>
 8003f68:	462a      	mov	r2, r5
 8003f6a:	f000 fac7 	bl	80044fc <_realloc_r>
 8003f6e:	4606      	mov	r6, r0
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d1e1      	bne.n	8003f38 <__ssputs_r+0x70>
 8003f74:	6921      	ldr	r1, [r4, #16]
 8003f76:	4650      	mov	r0, sl
 8003f78:	f7ff fdce 	bl	8003b18 <_free_r>
 8003f7c:	e7c7      	b.n	8003f0e <__ssputs_r+0x46>
	...

08003f80 <_svfiprintf_r>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	4698      	mov	r8, r3
 8003f86:	898b      	ldrh	r3, [r1, #12]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	b09d      	sub	sp, #116	; 0x74
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	d50e      	bpl.n	8003fb2 <_svfiprintf_r+0x32>
 8003f94:	690b      	ldr	r3, [r1, #16]
 8003f96:	b963      	cbnz	r3, 8003fb2 <_svfiprintf_r+0x32>
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	f7ff fe29 	bl	8003bf0 <_malloc_r>
 8003f9e:	6028      	str	r0, [r5, #0]
 8003fa0:	6128      	str	r0, [r5, #16]
 8003fa2:	b920      	cbnz	r0, 8003fae <_svfiprintf_r+0x2e>
 8003fa4:	230c      	movs	r3, #12
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	e0d1      	b.n	8004152 <_svfiprintf_r+0x1d2>
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	616b      	str	r3, [r5, #20]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc0:	2330      	movs	r3, #48	; 0x30
 8003fc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800416c <_svfiprintf_r+0x1ec>
 8003fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fca:	f04f 0901 	mov.w	r9, #1
 8003fce:	4623      	mov	r3, r4
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd6:	b10a      	cbz	r2, 8003fdc <_svfiprintf_r+0x5c>
 8003fd8:	2a25      	cmp	r2, #37	; 0x25
 8003fda:	d1f9      	bne.n	8003fd0 <_svfiprintf_r+0x50>
 8003fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe0:	d00b      	beq.n	8003ffa <_svfiprintf_r+0x7a>
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff ff6d 	bl	8003ec8 <__ssputs_r>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f000 80aa 	beq.w	8004148 <_svfiprintf_r+0x1c8>
 8003ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff6:	445a      	add	r2, fp
 8003ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8003ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80a2 	beq.w	8004148 <_svfiprintf_r+0x1c8>
 8004004:	2300      	movs	r3, #0
 8004006:	f04f 32ff 	mov.w	r2, #4294967295
 800400a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400e:	f10a 0a01 	add.w	sl, sl, #1
 8004012:	9304      	str	r3, [sp, #16]
 8004014:	9307      	str	r3, [sp, #28]
 8004016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800401a:	931a      	str	r3, [sp, #104]	; 0x68
 800401c:	4654      	mov	r4, sl
 800401e:	2205      	movs	r2, #5
 8004020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004024:	4851      	ldr	r0, [pc, #324]	; (800416c <_svfiprintf_r+0x1ec>)
 8004026:	f7fc f8db 	bl	80001e0 <memchr>
 800402a:	9a04      	ldr	r2, [sp, #16]
 800402c:	b9d8      	cbnz	r0, 8004066 <_svfiprintf_r+0xe6>
 800402e:	06d0      	lsls	r0, r2, #27
 8004030:	bf44      	itt	mi
 8004032:	2320      	movmi	r3, #32
 8004034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004038:	0711      	lsls	r1, r2, #28
 800403a:	bf44      	itt	mi
 800403c:	232b      	movmi	r3, #43	; 0x2b
 800403e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004042:	f89a 3000 	ldrb.w	r3, [sl]
 8004046:	2b2a      	cmp	r3, #42	; 0x2a
 8004048:	d015      	beq.n	8004076 <_svfiprintf_r+0xf6>
 800404a:	9a07      	ldr	r2, [sp, #28]
 800404c:	4654      	mov	r4, sl
 800404e:	2000      	movs	r0, #0
 8004050:	f04f 0c0a 	mov.w	ip, #10
 8004054:	4621      	mov	r1, r4
 8004056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800405a:	3b30      	subs	r3, #48	; 0x30
 800405c:	2b09      	cmp	r3, #9
 800405e:	d94e      	bls.n	80040fe <_svfiprintf_r+0x17e>
 8004060:	b1b0      	cbz	r0, 8004090 <_svfiprintf_r+0x110>
 8004062:	9207      	str	r2, [sp, #28]
 8004064:	e014      	b.n	8004090 <_svfiprintf_r+0x110>
 8004066:	eba0 0308 	sub.w	r3, r0, r8
 800406a:	fa09 f303 	lsl.w	r3, r9, r3
 800406e:	4313      	orrs	r3, r2
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	46a2      	mov	sl, r4
 8004074:	e7d2      	b.n	800401c <_svfiprintf_r+0x9c>
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	1d19      	adds	r1, r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9103      	str	r1, [sp, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfbb      	ittet	lt
 8004082:	425b      	neglt	r3, r3
 8004084:	f042 0202 	orrlt.w	r2, r2, #2
 8004088:	9307      	strge	r3, [sp, #28]
 800408a:	9307      	strlt	r3, [sp, #28]
 800408c:	bfb8      	it	lt
 800408e:	9204      	strlt	r2, [sp, #16]
 8004090:	7823      	ldrb	r3, [r4, #0]
 8004092:	2b2e      	cmp	r3, #46	; 0x2e
 8004094:	d10c      	bne.n	80040b0 <_svfiprintf_r+0x130>
 8004096:	7863      	ldrb	r3, [r4, #1]
 8004098:	2b2a      	cmp	r3, #42	; 0x2a
 800409a:	d135      	bne.n	8004108 <_svfiprintf_r+0x188>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	9203      	str	r2, [sp, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bfb8      	it	lt
 80040a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ac:	3402      	adds	r4, #2
 80040ae:	9305      	str	r3, [sp, #20]
 80040b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800417c <_svfiprintf_r+0x1fc>
 80040b4:	7821      	ldrb	r1, [r4, #0]
 80040b6:	2203      	movs	r2, #3
 80040b8:	4650      	mov	r0, sl
 80040ba:	f7fc f891 	bl	80001e0 <memchr>
 80040be:	b140      	cbz	r0, 80040d2 <_svfiprintf_r+0x152>
 80040c0:	2340      	movs	r3, #64	; 0x40
 80040c2:	eba0 000a 	sub.w	r0, r0, sl
 80040c6:	fa03 f000 	lsl.w	r0, r3, r0
 80040ca:	9b04      	ldr	r3, [sp, #16]
 80040cc:	4303      	orrs	r3, r0
 80040ce:	3401      	adds	r4, #1
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d6:	4826      	ldr	r0, [pc, #152]	; (8004170 <_svfiprintf_r+0x1f0>)
 80040d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040dc:	2206      	movs	r2, #6
 80040de:	f7fc f87f 	bl	80001e0 <memchr>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d038      	beq.n	8004158 <_svfiprintf_r+0x1d8>
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <_svfiprintf_r+0x1f4>)
 80040e8:	bb1b      	cbnz	r3, 8004132 <_svfiprintf_r+0x1b2>
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	3307      	adds	r3, #7
 80040ee:	f023 0307 	bic.w	r3, r3, #7
 80040f2:	3308      	adds	r3, #8
 80040f4:	9303      	str	r3, [sp, #12]
 80040f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f8:	4433      	add	r3, r6
 80040fa:	9309      	str	r3, [sp, #36]	; 0x24
 80040fc:	e767      	b.n	8003fce <_svfiprintf_r+0x4e>
 80040fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004102:	460c      	mov	r4, r1
 8004104:	2001      	movs	r0, #1
 8004106:	e7a5      	b.n	8004054 <_svfiprintf_r+0xd4>
 8004108:	2300      	movs	r3, #0
 800410a:	3401      	adds	r4, #1
 800410c:	9305      	str	r3, [sp, #20]
 800410e:	4619      	mov	r1, r3
 8004110:	f04f 0c0a 	mov.w	ip, #10
 8004114:	4620      	mov	r0, r4
 8004116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800411a:	3a30      	subs	r2, #48	; 0x30
 800411c:	2a09      	cmp	r2, #9
 800411e:	d903      	bls.n	8004128 <_svfiprintf_r+0x1a8>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0c5      	beq.n	80040b0 <_svfiprintf_r+0x130>
 8004124:	9105      	str	r1, [sp, #20]
 8004126:	e7c3      	b.n	80040b0 <_svfiprintf_r+0x130>
 8004128:	fb0c 2101 	mla	r1, ip, r1, r2
 800412c:	4604      	mov	r4, r0
 800412e:	2301      	movs	r3, #1
 8004130:	e7f0      	b.n	8004114 <_svfiprintf_r+0x194>
 8004132:	ab03      	add	r3, sp, #12
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	462a      	mov	r2, r5
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <_svfiprintf_r+0x1f8>)
 800413a:	a904      	add	r1, sp, #16
 800413c:	4638      	mov	r0, r7
 800413e:	f3af 8000 	nop.w
 8004142:	1c42      	adds	r2, r0, #1
 8004144:	4606      	mov	r6, r0
 8004146:	d1d6      	bne.n	80040f6 <_svfiprintf_r+0x176>
 8004148:	89ab      	ldrh	r3, [r5, #12]
 800414a:	065b      	lsls	r3, r3, #25
 800414c:	f53f af2c 	bmi.w	8003fa8 <_svfiprintf_r+0x28>
 8004150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004152:	b01d      	add	sp, #116	; 0x74
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004158:	ab03      	add	r3, sp, #12
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	462a      	mov	r2, r5
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <_svfiprintf_r+0x1f8>)
 8004160:	a904      	add	r1, sp, #16
 8004162:	4638      	mov	r0, r7
 8004164:	f000 f87a 	bl	800425c <_printf_i>
 8004168:	e7eb      	b.n	8004142 <_svfiprintf_r+0x1c2>
 800416a:	bf00      	nop
 800416c:	080049f5 	.word	0x080049f5
 8004170:	080049ff 	.word	0x080049ff
 8004174:	00000000 	.word	0x00000000
 8004178:	08003ec9 	.word	0x08003ec9
 800417c:	080049fb 	.word	0x080049fb

08004180 <_printf_common>:
 8004180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004184:	4616      	mov	r6, r2
 8004186:	4699      	mov	r9, r3
 8004188:	688a      	ldr	r2, [r1, #8]
 800418a:	690b      	ldr	r3, [r1, #16]
 800418c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004190:	4293      	cmp	r3, r2
 8004192:	bfb8      	it	lt
 8004194:	4613      	movlt	r3, r2
 8004196:	6033      	str	r3, [r6, #0]
 8004198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800419c:	4607      	mov	r7, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	b10a      	cbz	r2, 80041a6 <_printf_common+0x26>
 80041a2:	3301      	adds	r3, #1
 80041a4:	6033      	str	r3, [r6, #0]
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	0699      	lsls	r1, r3, #26
 80041aa:	bf42      	ittt	mi
 80041ac:	6833      	ldrmi	r3, [r6, #0]
 80041ae:	3302      	addmi	r3, #2
 80041b0:	6033      	strmi	r3, [r6, #0]
 80041b2:	6825      	ldr	r5, [r4, #0]
 80041b4:	f015 0506 	ands.w	r5, r5, #6
 80041b8:	d106      	bne.n	80041c8 <_printf_common+0x48>
 80041ba:	f104 0a19 	add.w	sl, r4, #25
 80041be:	68e3      	ldr	r3, [r4, #12]
 80041c0:	6832      	ldr	r2, [r6, #0]
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	42ab      	cmp	r3, r5
 80041c6:	dc26      	bgt.n	8004216 <_printf_common+0x96>
 80041c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041cc:	1e13      	subs	r3, r2, #0
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	bf18      	it	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	0692      	lsls	r2, r2, #26
 80041d6:	d42b      	bmi.n	8004230 <_printf_common+0xb0>
 80041d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041dc:	4649      	mov	r1, r9
 80041de:	4638      	mov	r0, r7
 80041e0:	47c0      	blx	r8
 80041e2:	3001      	adds	r0, #1
 80041e4:	d01e      	beq.n	8004224 <_printf_common+0xa4>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	68e5      	ldr	r5, [r4, #12]
 80041ea:	6832      	ldr	r2, [r6, #0]
 80041ec:	f003 0306 	and.w	r3, r3, #6
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	bf08      	it	eq
 80041f4:	1aad      	subeq	r5, r5, r2
 80041f6:	68a3      	ldr	r3, [r4, #8]
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	bf0c      	ite	eq
 80041fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004200:	2500      	movne	r5, #0
 8004202:	4293      	cmp	r3, r2
 8004204:	bfc4      	itt	gt
 8004206:	1a9b      	subgt	r3, r3, r2
 8004208:	18ed      	addgt	r5, r5, r3
 800420a:	2600      	movs	r6, #0
 800420c:	341a      	adds	r4, #26
 800420e:	42b5      	cmp	r5, r6
 8004210:	d11a      	bne.n	8004248 <_printf_common+0xc8>
 8004212:	2000      	movs	r0, #0
 8004214:	e008      	b.n	8004228 <_printf_common+0xa8>
 8004216:	2301      	movs	r3, #1
 8004218:	4652      	mov	r2, sl
 800421a:	4649      	mov	r1, r9
 800421c:	4638      	mov	r0, r7
 800421e:	47c0      	blx	r8
 8004220:	3001      	adds	r0, #1
 8004222:	d103      	bne.n	800422c <_printf_common+0xac>
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	3501      	adds	r5, #1
 800422e:	e7c6      	b.n	80041be <_printf_common+0x3e>
 8004230:	18e1      	adds	r1, r4, r3
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	2030      	movs	r0, #48	; 0x30
 8004236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800423a:	4422      	add	r2, r4
 800423c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004244:	3302      	adds	r3, #2
 8004246:	e7c7      	b.n	80041d8 <_printf_common+0x58>
 8004248:	2301      	movs	r3, #1
 800424a:	4622      	mov	r2, r4
 800424c:	4649      	mov	r1, r9
 800424e:	4638      	mov	r0, r7
 8004250:	47c0      	blx	r8
 8004252:	3001      	adds	r0, #1
 8004254:	d0e6      	beq.n	8004224 <_printf_common+0xa4>
 8004256:	3601      	adds	r6, #1
 8004258:	e7d9      	b.n	800420e <_printf_common+0x8e>
	...

0800425c <_printf_i>:
 800425c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	7e0f      	ldrb	r7, [r1, #24]
 8004262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004264:	2f78      	cmp	r7, #120	; 0x78
 8004266:	4691      	mov	r9, r2
 8004268:	4680      	mov	r8, r0
 800426a:	460c      	mov	r4, r1
 800426c:	469a      	mov	sl, r3
 800426e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004272:	d807      	bhi.n	8004284 <_printf_i+0x28>
 8004274:	2f62      	cmp	r7, #98	; 0x62
 8004276:	d80a      	bhi.n	800428e <_printf_i+0x32>
 8004278:	2f00      	cmp	r7, #0
 800427a:	f000 80d8 	beq.w	800442e <_printf_i+0x1d2>
 800427e:	2f58      	cmp	r7, #88	; 0x58
 8004280:	f000 80a3 	beq.w	80043ca <_printf_i+0x16e>
 8004284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800428c:	e03a      	b.n	8004304 <_printf_i+0xa8>
 800428e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004292:	2b15      	cmp	r3, #21
 8004294:	d8f6      	bhi.n	8004284 <_printf_i+0x28>
 8004296:	a101      	add	r1, pc, #4	; (adr r1, 800429c <_printf_i+0x40>)
 8004298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	08004309 	.word	0x08004309
 80042a4:	08004285 	.word	0x08004285
 80042a8:	08004285 	.word	0x08004285
 80042ac:	08004285 	.word	0x08004285
 80042b0:	08004285 	.word	0x08004285
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004285 	.word	0x08004285
 80042bc:	08004285 	.word	0x08004285
 80042c0:	08004285 	.word	0x08004285
 80042c4:	08004285 	.word	0x08004285
 80042c8:	08004415 	.word	0x08004415
 80042cc:	08004339 	.word	0x08004339
 80042d0:	080043f7 	.word	0x080043f7
 80042d4:	08004285 	.word	0x08004285
 80042d8:	08004285 	.word	0x08004285
 80042dc:	08004437 	.word	0x08004437
 80042e0:	08004285 	.word	0x08004285
 80042e4:	08004339 	.word	0x08004339
 80042e8:	08004285 	.word	0x08004285
 80042ec:	08004285 	.word	0x08004285
 80042f0:	080043ff 	.word	0x080043ff
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	602a      	str	r2, [r5, #0]
 80042fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004304:	2301      	movs	r3, #1
 8004306:	e0a3      	b.n	8004450 <_printf_i+0x1f4>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	6829      	ldr	r1, [r5, #0]
 800430c:	0606      	lsls	r6, r0, #24
 800430e:	f101 0304 	add.w	r3, r1, #4
 8004312:	d50a      	bpl.n	800432a <_printf_i+0xce>
 8004314:	680e      	ldr	r6, [r1, #0]
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	2e00      	cmp	r6, #0
 800431a:	da03      	bge.n	8004324 <_printf_i+0xc8>
 800431c:	232d      	movs	r3, #45	; 0x2d
 800431e:	4276      	negs	r6, r6
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004324:	485e      	ldr	r0, [pc, #376]	; (80044a0 <_printf_i+0x244>)
 8004326:	230a      	movs	r3, #10
 8004328:	e019      	b.n	800435e <_printf_i+0x102>
 800432a:	680e      	ldr	r6, [r1, #0]
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004332:	bf18      	it	ne
 8004334:	b236      	sxthne	r6, r6
 8004336:	e7ef      	b.n	8004318 <_printf_i+0xbc>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	6029      	str	r1, [r5, #0]
 8004340:	0601      	lsls	r1, r0, #24
 8004342:	d501      	bpl.n	8004348 <_printf_i+0xec>
 8004344:	681e      	ldr	r6, [r3, #0]
 8004346:	e002      	b.n	800434e <_printf_i+0xf2>
 8004348:	0646      	lsls	r6, r0, #25
 800434a:	d5fb      	bpl.n	8004344 <_printf_i+0xe8>
 800434c:	881e      	ldrh	r6, [r3, #0]
 800434e:	4854      	ldr	r0, [pc, #336]	; (80044a0 <_printf_i+0x244>)
 8004350:	2f6f      	cmp	r7, #111	; 0x6f
 8004352:	bf0c      	ite	eq
 8004354:	2308      	moveq	r3, #8
 8004356:	230a      	movne	r3, #10
 8004358:	2100      	movs	r1, #0
 800435a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800435e:	6865      	ldr	r5, [r4, #4]
 8004360:	60a5      	str	r5, [r4, #8]
 8004362:	2d00      	cmp	r5, #0
 8004364:	bfa2      	ittt	ge
 8004366:	6821      	ldrge	r1, [r4, #0]
 8004368:	f021 0104 	bicge.w	r1, r1, #4
 800436c:	6021      	strge	r1, [r4, #0]
 800436e:	b90e      	cbnz	r6, 8004374 <_printf_i+0x118>
 8004370:	2d00      	cmp	r5, #0
 8004372:	d04d      	beq.n	8004410 <_printf_i+0x1b4>
 8004374:	4615      	mov	r5, r2
 8004376:	fbb6 f1f3 	udiv	r1, r6, r3
 800437a:	fb03 6711 	mls	r7, r3, r1, r6
 800437e:	5dc7      	ldrb	r7, [r0, r7]
 8004380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004384:	4637      	mov	r7, r6
 8004386:	42bb      	cmp	r3, r7
 8004388:	460e      	mov	r6, r1
 800438a:	d9f4      	bls.n	8004376 <_printf_i+0x11a>
 800438c:	2b08      	cmp	r3, #8
 800438e:	d10b      	bne.n	80043a8 <_printf_i+0x14c>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	07de      	lsls	r6, r3, #31
 8004394:	d508      	bpl.n	80043a8 <_printf_i+0x14c>
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	6861      	ldr	r1, [r4, #4]
 800439a:	4299      	cmp	r1, r3
 800439c:	bfde      	ittt	le
 800439e:	2330      	movle	r3, #48	; 0x30
 80043a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043a8:	1b52      	subs	r2, r2, r5
 80043aa:	6122      	str	r2, [r4, #16]
 80043ac:	f8cd a000 	str.w	sl, [sp]
 80043b0:	464b      	mov	r3, r9
 80043b2:	aa03      	add	r2, sp, #12
 80043b4:	4621      	mov	r1, r4
 80043b6:	4640      	mov	r0, r8
 80043b8:	f7ff fee2 	bl	8004180 <_printf_common>
 80043bc:	3001      	adds	r0, #1
 80043be:	d14c      	bne.n	800445a <_printf_i+0x1fe>
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	b004      	add	sp, #16
 80043c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ca:	4835      	ldr	r0, [pc, #212]	; (80044a0 <_printf_i+0x244>)
 80043cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043d0:	6829      	ldr	r1, [r5, #0]
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80043d8:	6029      	str	r1, [r5, #0]
 80043da:	061d      	lsls	r5, r3, #24
 80043dc:	d514      	bpl.n	8004408 <_printf_i+0x1ac>
 80043de:	07df      	lsls	r7, r3, #31
 80043e0:	bf44      	itt	mi
 80043e2:	f043 0320 	orrmi.w	r3, r3, #32
 80043e6:	6023      	strmi	r3, [r4, #0]
 80043e8:	b91e      	cbnz	r6, 80043f2 <_printf_i+0x196>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f023 0320 	bic.w	r3, r3, #32
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	2310      	movs	r3, #16
 80043f4:	e7b0      	b.n	8004358 <_printf_i+0xfc>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f043 0320 	orr.w	r3, r3, #32
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	2378      	movs	r3, #120	; 0x78
 8004400:	4828      	ldr	r0, [pc, #160]	; (80044a4 <_printf_i+0x248>)
 8004402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004406:	e7e3      	b.n	80043d0 <_printf_i+0x174>
 8004408:	0659      	lsls	r1, r3, #25
 800440a:	bf48      	it	mi
 800440c:	b2b6      	uxthmi	r6, r6
 800440e:	e7e6      	b.n	80043de <_printf_i+0x182>
 8004410:	4615      	mov	r5, r2
 8004412:	e7bb      	b.n	800438c <_printf_i+0x130>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	6826      	ldr	r6, [r4, #0]
 8004418:	6961      	ldr	r1, [r4, #20]
 800441a:	1d18      	adds	r0, r3, #4
 800441c:	6028      	str	r0, [r5, #0]
 800441e:	0635      	lsls	r5, r6, #24
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	d501      	bpl.n	8004428 <_printf_i+0x1cc>
 8004424:	6019      	str	r1, [r3, #0]
 8004426:	e002      	b.n	800442e <_printf_i+0x1d2>
 8004428:	0670      	lsls	r0, r6, #25
 800442a:	d5fb      	bpl.n	8004424 <_printf_i+0x1c8>
 800442c:	8019      	strh	r1, [r3, #0]
 800442e:	2300      	movs	r3, #0
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	4615      	mov	r5, r2
 8004434:	e7ba      	b.n	80043ac <_printf_i+0x150>
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	602a      	str	r2, [r5, #0]
 800443c:	681d      	ldr	r5, [r3, #0]
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	2100      	movs	r1, #0
 8004442:	4628      	mov	r0, r5
 8004444:	f7fb fecc 	bl	80001e0 <memchr>
 8004448:	b108      	cbz	r0, 800444e <_printf_i+0x1f2>
 800444a:	1b40      	subs	r0, r0, r5
 800444c:	6060      	str	r0, [r4, #4]
 800444e:	6863      	ldr	r3, [r4, #4]
 8004450:	6123      	str	r3, [r4, #16]
 8004452:	2300      	movs	r3, #0
 8004454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004458:	e7a8      	b.n	80043ac <_printf_i+0x150>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	462a      	mov	r2, r5
 800445e:	4649      	mov	r1, r9
 8004460:	4640      	mov	r0, r8
 8004462:	47d0      	blx	sl
 8004464:	3001      	adds	r0, #1
 8004466:	d0ab      	beq.n	80043c0 <_printf_i+0x164>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	079b      	lsls	r3, r3, #30
 800446c:	d413      	bmi.n	8004496 <_printf_i+0x23a>
 800446e:	68e0      	ldr	r0, [r4, #12]
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	4298      	cmp	r0, r3
 8004474:	bfb8      	it	lt
 8004476:	4618      	movlt	r0, r3
 8004478:	e7a4      	b.n	80043c4 <_printf_i+0x168>
 800447a:	2301      	movs	r3, #1
 800447c:	4632      	mov	r2, r6
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	47d0      	blx	sl
 8004484:	3001      	adds	r0, #1
 8004486:	d09b      	beq.n	80043c0 <_printf_i+0x164>
 8004488:	3501      	adds	r5, #1
 800448a:	68e3      	ldr	r3, [r4, #12]
 800448c:	9903      	ldr	r1, [sp, #12]
 800448e:	1a5b      	subs	r3, r3, r1
 8004490:	42ab      	cmp	r3, r5
 8004492:	dcf2      	bgt.n	800447a <_printf_i+0x21e>
 8004494:	e7eb      	b.n	800446e <_printf_i+0x212>
 8004496:	2500      	movs	r5, #0
 8004498:	f104 0619 	add.w	r6, r4, #25
 800449c:	e7f5      	b.n	800448a <_printf_i+0x22e>
 800449e:	bf00      	nop
 80044a0:	08004a06 	.word	0x08004a06
 80044a4:	08004a17 	.word	0x08004a17

080044a8 <__retarget_lock_acquire_recursive>:
 80044a8:	4770      	bx	lr

080044aa <__retarget_lock_release_recursive>:
 80044aa:	4770      	bx	lr

080044ac <memcpy>:
 80044ac:	440a      	add	r2, r1
 80044ae:	4291      	cmp	r1, r2
 80044b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b4:	d100      	bne.n	80044b8 <memcpy+0xc>
 80044b6:	4770      	bx	lr
 80044b8:	b510      	push	{r4, lr}
 80044ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c2:	4291      	cmp	r1, r2
 80044c4:	d1f9      	bne.n	80044ba <memcpy+0xe>
 80044c6:	bd10      	pop	{r4, pc}

080044c8 <memmove>:
 80044c8:	4288      	cmp	r0, r1
 80044ca:	b510      	push	{r4, lr}
 80044cc:	eb01 0402 	add.w	r4, r1, r2
 80044d0:	d902      	bls.n	80044d8 <memmove+0x10>
 80044d2:	4284      	cmp	r4, r0
 80044d4:	4623      	mov	r3, r4
 80044d6:	d807      	bhi.n	80044e8 <memmove+0x20>
 80044d8:	1e43      	subs	r3, r0, #1
 80044da:	42a1      	cmp	r1, r4
 80044dc:	d008      	beq.n	80044f0 <memmove+0x28>
 80044de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044e6:	e7f8      	b.n	80044da <memmove+0x12>
 80044e8:	4402      	add	r2, r0
 80044ea:	4601      	mov	r1, r0
 80044ec:	428a      	cmp	r2, r1
 80044ee:	d100      	bne.n	80044f2 <memmove+0x2a>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044fa:	e7f7      	b.n	80044ec <memmove+0x24>

080044fc <_realloc_r>:
 80044fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004500:	4680      	mov	r8, r0
 8004502:	4614      	mov	r4, r2
 8004504:	460e      	mov	r6, r1
 8004506:	b921      	cbnz	r1, 8004512 <_realloc_r+0x16>
 8004508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800450c:	4611      	mov	r1, r2
 800450e:	f7ff bb6f 	b.w	8003bf0 <_malloc_r>
 8004512:	b92a      	cbnz	r2, 8004520 <_realloc_r+0x24>
 8004514:	f7ff fb00 	bl	8003b18 <_free_r>
 8004518:	4625      	mov	r5, r4
 800451a:	4628      	mov	r0, r5
 800451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004520:	f000 f81b 	bl	800455a <_malloc_usable_size_r>
 8004524:	4284      	cmp	r4, r0
 8004526:	4607      	mov	r7, r0
 8004528:	d802      	bhi.n	8004530 <_realloc_r+0x34>
 800452a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800452e:	d812      	bhi.n	8004556 <_realloc_r+0x5a>
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f7ff fb5c 	bl	8003bf0 <_malloc_r>
 8004538:	4605      	mov	r5, r0
 800453a:	2800      	cmp	r0, #0
 800453c:	d0ed      	beq.n	800451a <_realloc_r+0x1e>
 800453e:	42bc      	cmp	r4, r7
 8004540:	4622      	mov	r2, r4
 8004542:	4631      	mov	r1, r6
 8004544:	bf28      	it	cs
 8004546:	463a      	movcs	r2, r7
 8004548:	f7ff ffb0 	bl	80044ac <memcpy>
 800454c:	4631      	mov	r1, r6
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff fae2 	bl	8003b18 <_free_r>
 8004554:	e7e1      	b.n	800451a <_realloc_r+0x1e>
 8004556:	4635      	mov	r5, r6
 8004558:	e7df      	b.n	800451a <_realloc_r+0x1e>

0800455a <_malloc_usable_size_r>:
 800455a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455e:	1f18      	subs	r0, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	bfbc      	itt	lt
 8004564:	580b      	ldrlt	r3, [r1, r0]
 8004566:	18c0      	addlt	r0, r0, r3
 8004568:	4770      	bx	lr
	...

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
